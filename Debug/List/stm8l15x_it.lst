###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             23/Nov/2013  20:13:18 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  F:\Skydrive\Final Design\STM8L-Discovery\Project\Discove #
#                    r\src\stm8l15x_it.c                                      #
#    Command line =  "F:\Skydrive\Final Design\STM8L-Discovery\Project\Discov #
#                    er\src\stm8l15x_it.c" -e -Ol --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_cross_call   #
#                    --debug --code_model small --data_model medium -o        #
#                    "F:\Skydrive\Final Design\STM8L-Discovery\Debug\Obj\"    #
#                    --dlib_config "D:\IAR Systems\Embedded Workbench         #
#                    6.0\stm8\LIB\dlstm8smn.h" -D STM8L15X_MD -lCN            #
#                    "F:\Skydrive\Final Design\STM8L-Discovery\Debug\List\"   #
#                    --diag_suppress Pe177,Pe550 -I "F:\Skydrive\Final        #
#                    Design\STM8L-Discovery\Project\Discover\inc\" -I         #
#                    "F:\Skydrive\Final Design\STM8L-Discovery\Libraries\STM8 #
#                    L15x_StdPeriph_Driver\inc\" --vregs 16                   #
#    List file    =  F:\Skydrive\Final Design\STM8L-Discovery\Debug\List\stm8 #
#                    l15x_it.lst                                              #
#    Object file  =  F:\Skydrive\Final Design\STM8L-Discovery\Debug\Obj\stm8l #
#                    15x_it.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

F:\Skydrive\Final Design\STM8L-Discovery\Project\Discover\src\stm8l15x_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    Project/Template/stm8l15x_it.c
      4            * @author  MCD Tools Team
      5            * @version V1.2.0
      6            * @date    09/2010
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all peripherals interrupt service routine.
      9            ******************************************************************************
     10            * @copy
     11            *
     12            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     13            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     14            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     15            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     16            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     17            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     18            *
     19            * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
     20            */ 
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm8l15x.h"
     24          #include "stm8l15x_it.h"
     25          #include "discover_functions.h"
     26          #include "discover_board.h"
     27          #include "stm8l_discovery_lcd.h"
     28          
     29          /*extern bool KeyPressed;
     30          extern uint8_t state_machine;
     31          extern bool Auto_test;
     32          extern uint8_t t_bar[2];*/
     33          
     34          /** @addtogroup IT_Functions
     35            * @{
     36            */
     37          INTERRUPT_HANDLER(NonHandledInterrupt,0)
     38          {
     39          /* In order to detect unexpected events during development,
     40             it is recommended to set a breakpoint on the following instruction.
     41          */
     42            while (1);
     43          
     44          }
     45          /**
     46            * @brief TRAP interrupt routine
     47            * @par Parameters:
     48            * None
     49            * @retval 
     50            * None
     51          */
     52          INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
     53          {
     54          /* In order to detect unexpected events during development,
     55             it is recommended to set a breakpoint on the following instruction.
     56          */
     57            while (1);
     58          
     59          }
     60          /**
     61            * @brief FLASH Interrupt routine.
     62            * @par Parameters:
     63            * None
     64            * @retval 
     65            * None
     66            */
     67          INTERRUPT_HANDLER(FLASH_IRQHandler,1)
     68          {
     69          /* In order to detect unexpected events during development,
     70             it is recommended to set a breakpoint on the following instruction.
     71          */
     72            while (1);
     73          
     74          }
     75          /**
     76            * @brief DMA1 channel0 and channel1 Interrupt routine.
     77            * @par Parameters:
     78            * None
     79            * @retval 
     80            * None
     81            */
     82          INTERRUPT_HANDLER(DMA1_CHANNEL0_1_IRQHandler,2)
     83          {
     84          /* In order to detect unexpected events during development,
     85             it is recommended to set a breakpoint on the following instruction.
     86          */
     87            while (1);
     88          
     89          }
     90          /**
     91            * @brief DMA1 channel2 and channel3 Interrupt routine.
     92            * @par Parameters:
     93            * None
     94            * @retval 
     95            * None
     96            */
     97          INTERRUPT_HANDLER(DMA1_CHANNEL2_3_IRQHandler,3)
     98          {
     99          /* In order to detect unexpected events during development,
    100             it is recommended to set a breakpoint on the following instruction.
    101          */
    102            while (1);
    103          
    104          }
    105          /**
    106            * @brief RTC Interrupt routine.
    107            * @par Parameters:
    108            * None
    109            * @retval 
    110            * None
    111            */
    112          
    113          INTERRUPT_HANDLER(RTC_IRQHandler,4)
    114          {
    115          /* In order to detect unexpected events during development,
    116             it is recommended to set a breakpoint on the following instruction.
    117          */
    118            while (1);
    119          
    120          }
    121          /**
    122            * @brief External IT PORTE/F and PVD Interrupt routine.
    123            * @par Parameters:
    124            * None
    125            * @retval 
    126            * None
    127            */
    128          INTERRUPT_HANDLER(EXTIE_F_PVD_IRQHandler,5)
    129          {
    130          /* In order to detect unexpected events during development,
    131             it is recommended to set a breakpoint on the following instruction.
    132          */
    133            while (1);
    134          
    135          }
    136          
    137          /**
    138            * @brief External IT PORTB Interrupt routine.
    139            * @par Parameters:
    140            * None
    141            * @retval 
    142            * None
    143            */
    144          INTERRUPT_HANDLER(EXTIB_IRQHandler,6)
    145          {
    146          /* In order to detect unexpected events during development,
    147             it is recommended to set a breakpoint on the following instruction.
    148          */
    149            while (1);
    150          
    151          }
    152          
    153          /**
    154            * @brief External IT PORTD Interrupt routine.
    155            * @par Parameters:
    156            * None
    157            * @retval 
    158            * None
    159            */
    160          INTERRUPT_HANDLER(EXTID_IRQHandler,7)
    161          {
    162          /* In order to detect unexpected events during development,
    163             it is recommended to set a breakpoint on the following instruction.
    164          */
    165            while (1);
    166          
    167          }
    168          
    169          /**
    170            * @brief External IT PIN0 Interrupt routine.
    171            * @par Parameters:
    172            * None
    173            * @retval 
    174            * None
    175            */
    176          
    177          INTERRUPT_HANDLER(EXTI0_IRQHandler,8)
    178          {
    179          /* In order to detect unexpected events during development,
    180             it is recommended to set a breakpoint on the following instruction.
    181          */
    182            while (1);
    183          
    184          }
    185          /**
    186            * @brief External IT PIN1 Interrupt routine.
    187            *   On User button pressed:
    188            *   Check if button presse a long time (4-5 sec.) if yes --> Set Autotest
    189            *   Else update status_machine to pass to next measuremetn.
    190            *   Update the LCD bar graph
    191            * @par Parameters:
    192            * None
    193            * @retval 
    194            * None
    195            */
    196          INTERRUPT_HANDLER(EXTI1_IRQHandler,9)
    197          {
    198          
    199            uint32_t i=0;	
    200            
    201            disableInterrupts();
    202            
    203            /* User button pressed */
    204            KeyPressed = TRUE;
    205            
    206            if ((GPIOC->IDR & USER_GPIO_PIN) == 0x0) 
    207            {
    208                    
    209            /* If user button pressed 4 seconds (approx.) set autotest */
    210            /* Autotest doesn't execute in Interrupt handler */
    211            while ((GPIOC->IDR & USER_GPIO_PIN) == 0x0)
    212            {
    213              i++;
    214              if (i == 0x011000)
    215              {
    216                EXTI_ClearITPendingBit(EXTI_IT_Pin1);	
    217                Auto_test =TRUE ;
    218                enableInterrupts();
    219                return;
    220              }
    221            }
    222            
    223            /* To pass to next state*/
    224              state_machine++;
    225              
    226              if (state_machine == MAX_STATE)
    227              {	
    228                      state_machine = STATE_VREF;
    229              }
    230          
    231              /* To update Bar graph */  
    232              switch (state_machine)
    233              {
    234                case STATE_VREF:
    235                        GPIO_HIGH(LED_GREEN_PORT,LED_GREEN_PIN);	
    236                        GPIO_LOW(LED_BLUE_PORT,LED_BLUE_PIN);
    237                        BAR0_OFF;
    238                        BAR1_OFF;
    239                        BAR2_OFF;
    240                        BAR3_OFF;
    241                        break;
    242                        
    243                case STATE_ICC_RUN:
    244                        BAR0_ON;
    245                        BAR1_OFF;
    246                        BAR2_OFF;
    247                        BAR3_OFF;
    248                        break;
    249                        
    250                case STATE_LPR_LCD:
    251                        BAR0_ON;
    252                        BAR1_ON;
    253                        BAR2_OFF;
    254                        BAR3_OFF;
    255                        break;
    256                        
    257                case STATE_LPR:
    258                        BAR0_ON;
    259                        BAR1_ON;
    260                        BAR2_ON;
    261                        BAR3_OFF;
    262                        break;
    263                        
    264                case STATE_HALT:
    265                        BAR0_ON;
    266                        BAR1_ON;
    267                        BAR2_ON;
    268                        BAR3_ON;
    269                        break;					
    270              }	
    271            }
    272            
    273            /* To stop leds for current measurement test*/	
    274            if (state_machine != STATE_VREF)
    275            {
    276              GPIO_LOW(LED_GREEN_PORT,LED_GREEN_PIN);	
    277              GPIO_LOW(LED_BLUE_PORT,LED_BLUE_PIN);		
    278            }
    279            
    280            EXTI_ClearITPendingBit(EXTI_IT_Pin1);
    281            
    282            enableInterrupts();
    283          
    284          }
    285          
    286          /**
    287            * @brief External IT PIN2 Interrupt routine.
    288            * @par Parameters:
    289            * None
    290            * @retval 
    291            * None
    292            */
    293          
    294          INTERRUPT_HANDLER(EXTI2_IRQHandler,10)
    295          {
    296          /* In order to detect unexpected events during development,
    297             it is recommended to set a breakpoint on the following instruction.
    298          */
    299            while (1);
    300          
    301          }
    302          
    303          /**
    304            * @brief External IT PIN3 Interrupt routine.
    305            * @par Parameters:
    306            * None
    307            * @retval 
    308            * None
    309            */
    310          INTERRUPT_HANDLER(EXTI3_IRQHandler,11)
    311          {
    312          /* In order to detect unexpected events during development,
    313             it is recommended to set a breakpoint on the following instruction.
    314          */
    315            while (1);
    316          
    317          }
    318          
    319          /**
    320            * @brief External IT PIN4 Interrupt routine.
    321            * @par Parameters:
    322            * None
    323            * @retval 
    324            * None
    325            */
    326          INTERRUPT_HANDLER(EXTI4_IRQHandler,12)
    327          {
    328          /* In order to detect unexpected events during development,
    329             it is recommended to set a breakpoint on the following instruction.
    330          */
    331            while (1);
    332          
    333          }
    334          
    335          /**
    336            * @brief External IT PIN5 Interrupt routine.
    337            * @par Parameters:
    338            * None
    339            * @retval 
    340            * None
    341            */
    342          INTERRUPT_HANDLER(EXTI5_IRQHandler,13)
    343          {
    344          /* In order to detect unexpected events during development,
    345             it is recommended to set a breakpoint on the following instruction.
    346          */
    347            while (1);
    348            
    349          }
    350          
    351          /**
    352            * @brief External IT PIN6 Interrupt routine.
    353            * @par Parameters:
    354            * None
    355            * @retval 
    356            * None
    357            */
    358          INTERRUPT_HANDLER(EXTI6_IRQHandler,14)
    359          {
    360            disableInterrupts();
    361            
    362            /* To clear External IT Pin6 */
    363            EXTI_ClearITPendingBit(EXTI_IT_Pin6);
    364            
    365            enableInterrupts();
    366          
    367          }
    368          
    369          /**
    370            * @brief External IT PIN7 Interrupt routine.
    371            * @par Parameters:
    372            * None
    373            * @retval 
    374            * None
    375            */
    376          INTERRUPT_HANDLER(EXTI7_IRQHandler,15)
    377          {
    378          /* In order to detect unexpected events during development,
    379             it is recommended to set a breakpoint on the following instruction.
    380          */
    381            
    382            while (1);
    383          
    384          }
    385          /**
    386            * @brief LCD start of new frame Interrupt routine.
    387            * @par Parameters:
    388            * None
    389            * @retval 
    390            * None
    391            */
    392          INTERRUPT_HANDLER(LCD_IRQHandler,16)
    393          {
    394          /* In order to detect unexpected events during development,
    395             it is recommended to set a breakpoint on the following instruction.
    396          */
    397            while (1);
    398          
    399          }
    400          /**
    401            * @brief CLK switch/CSS/TIM1 break Interrupt routine.
    402            * @par Parameters:
    403            * None
    404            * @retval 
    405            * None
    406            */
    407          INTERRUPT_HANDLER(SWITCH_CSS_BREAK_DAC_IRQHandler,17)
    408          {
    409          /* In order to detect unexpected events during development,
    410             it is recommended to set a breakpoint on the following instruction.
    411          */
    412            while (1);
    413          
    414          }
    415          
    416          /**
    417            * @brief ADC1/Comparator Interrupt routine.
    418            * @par Parameters:
    419            * None
    420            * @retval 
    421            * None
    422            */
    423          INTERRUPT_HANDLER(ADC1_COMP_IRQHandler,18)
    424          {
    425          /* In order to detect unexpected events during development,
    426             it is recommended to set a breakpoint on the following instruction.
    427          */
    428            while (1);
    429          
    430          }
    431          
    432          /**
    433            * @brief TIM2 Update/Overflow/Trigger/Break Interrupt routine.
    434            * @par Parameters:
    435            * None
    436            * @retval 
    437            * None
    438            */
    439          INTERRUPT_HANDLER(TIM2_UPD_OVF_TRG_BRK_IRQHandler,19)
    440          {
    441          /* In order to detect unexpected events during development,
    442             it is recommended to set a breakpoint on the following instruction.
    443          */
    444            while (1);
    445          
    446          }
    447          
    448          /**
    449            * @brief Timer2 Capture/Compare Interrupt routine.
    450            * @par Parameters:
    451            * None
    452            * @retval 
    453            * None
    454            */
    455          INTERRUPT_HANDLER(TIM2_CAP_IRQHandler,20)
    456          {
    457          /* In order to detect unexpected events during development,
    458             it is recommended to set a breakpoint on the following instruction.
    459          */
    460            while (1);
    461          
    462          }
    463          
    464          
    465          /**
    466            * @brief Timer3 Update/Overflow/Trigger/Break Interrupt routine.
    467            * @par Parameters:
    468            * None
    469            * @retval 
    470            * None
    471            */
    472          INTERRUPT_HANDLER(TIM3_UPD_OVF_TRG_BRK_IRQHandler,21)
    473          {
    474          /* In order to detect unexpected events during development,
    475             it is recommended to set a breakpoint on the following instruction.
    476          */
    477            while (1);
    478          
    479          }
    480          /**
    481            * @brief Timer3 Capture/Compare Interrupt routine.
    482            * @par Parameters:
    483            * None
    484            * @retval 
    485            * None
    486            */
    487          INTERRUPT_HANDLER(TIM3_CAP_IRQHandler,22)
    488          {
    489          /* In order to detect unexpected events during development,
    490             it is recommended to set a breakpoint on the following instruction.
    491          */
    492            while (1);
    493          
    494          }
    495          /**
    496            * @brief TIM1 Update/Overflow/Trigger/Commutation Interrupt routine.
    497            * @par Parameters:
    498            * None
    499            * @retval 
    500            * None
    501            */
    502          INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_COM_IRQHandler,23)
    503          {
    504          /* In order to detect unexpected events during development,
    505             it is recommended to set a breakpoint on the following instruction.
    506          */
    507            while (1);
    508          
    509          }
    510          /**
    511            * @brief TIM1 Capture/Compare Interrupt routine.
    512            * @par Parameters:
    513            * None
    514            * @retval 
    515            * None
    516            */
    517          INTERRUPT_HANDLER(TIM1_CAP_IRQHandler,24)
    518          {
    519          /* In order to detect unexpected events during development,
    520             it is recommended to set a breakpoint on the following instruction.
    521          */
    522            while (1);
    523          
    524          }
    525          
    526          /**
    527            * @brief TIM4 Update/Overflow/Trigger Interrupt routine.
    528            * @par Parameters:
    529            * None
    530            * @retval 
    531            * None
    532            */
    533          INTERRUPT_HANDLER(TIM4_UPD_OVF_TRG_IRQHandler,25)
    534          {
    535          /* In order to detect unexpected events during development,
    536             it is recommended to set a breakpoint on the following instruction.
    537          */
    538            while (1);
    539          
    540          }
    541          /**
    542            * @brief SPI1 Interrupt routine.
    543            * @par Parameters:
    544            * None
    545            * @retval 
    546            * None
    547            */
    548          INTERRUPT_HANDLER(SPI1_IRQHandler,26)
    549          {
    550          /* In order to detect unexpected events during development,
    551             it is recommended to set a breakpoint on the following instruction.
    552          */
    553            while (1);
    554          
    555          }
    556          
    557          /**
    558            * @brief USART1 TX Interrupt routine.
    559            * @par Parameters:
    560            * None
    561            * @retval 
    562            * None
    563            */
    564          INTERRUPT_HANDLER(USART1_TX_IRQHandler,27)
    565          {
    566          /* In order to detect unexpected events during development,
    567             it is recommended to set a breakpoint on the following instruction.
    568          */
    569            while (1);
    570          
    571          }
    572          
    573          /**
    574            * @brief USART1 RX Interrupt routine.
    575            * @par Parameters:
    576            * None
    577            * @retval 
    578            * None
    579            */
    580          INTERRUPT_HANDLER(USART1_RX_IRQHandler,28)
    581          {
    582          /* In order to detect unexpected events during development,
    583             it is recommended to set a breakpoint on the following instruction.
    584          */
    585            while (1);
    586          
    587          }
    588          
    589          /**
    590            * @brief I2C1 Interrupt routine.
    591            * @par Parameters:
    592            * None
    593            * @retval 
    594            * None
    595            */
    596          INTERRUPT_HANDLER(I2C1_IRQHandler,29)
    597          {
    598          /* In order to detect unexpected events during development,
    599             it is recommended to set a breakpoint on the following instruction.
    600          */
    601            while (1);
    602          }
    603          
    604          /**
    605            * @}
    606            */
    607          /******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/
    608          

Errors: 5
Warnings: none
