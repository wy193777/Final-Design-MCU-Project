###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             20/Apr/2014  20:40:38 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  F:\Skydrive\Final Design\Servo Motor                     #
#                    STM8L\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_g #
#                    pio.c                                                    #
#    Command line =  "F:\Skydrive\Final Design\Servo Motor                    #
#                    STM8L\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_g #
#                    pio.c" -e -Ol --no_cse --no_unroll --no_inline           #
#                    --no_code_motion --no_tbaa --no_cross_call --debug       #
#                    --code_model small --data_model medium -o                #
#                    "F:\Skydrive\Final Design\Servo Motor STM8L\Debug\Obj\"  #
#                    --dlib_config "D:\IAR Systems\Embedded Workbench         #
#                    6.0\stm8\LIB\dlstm8smn.h" -D STM8L15X_MD -lCN            #
#                    "F:\Skydrive\Final Design\Servo Motor                    #
#                    STM8L\Debug\List\" --diag_suppress Pe177,Pe550 -I        #
#                    "F:\Skydrive\Final Design\Servo Motor                    #
#                    STM8L\Project\Discover\inc\" -I "F:\Skydrive\Final       #
#                    Design\Servo Motor STM8L\Libraries\STM8L15x_StdPeriph_Dr #
#                    iver\inc\" --vregs 16                                    #
#    List file    =  F:\Skydrive\Final Design\Servo Motor                     #
#                    STM8L\Debug\List\stm8l15x_gpio.lst                       #
#    Object file  =  F:\Skydrive\Final Design\Servo Motor                     #
#                    STM8L\Debug\Obj\stm8l15x_gpio.o                          #
#                                                                             #
#                                                                             #
###############################################################################

F:\Skydrive\Final Design\Servo Motor STM8L\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_gpio.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8l15x_gpio.c
      4            * @author  MCD Application Team
      5            * @version V1.4.0
      6            * @date    09/24/2010
      7            * @brief   This file provides all the GPIO firmware functions.
      8            ******************************************************************************
      9            * @copy
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
     19            */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "stm8l15x_gpio.h"
     23          
     24          /** @addtogroup STM8L15x_StdPeriph_Driver
     25            * @{
     26            */
     27          
     28          /* Private typedef -----------------------------------------------------------*/
     29          /* Private define ------------------------------------------------------------*/
     30          /* Private macro -------------------------------------------------------------*/
     31          /* Private variables ---------------------------------------------------------*/
     32          /* Private function prototypes -----------------------------------------------*/
     33          /* Private functions ---------------------------------------------------------*/
     34          
     35          /**
     36            * @addtogroup GPIO_Public_Functions
     37            * @{
     38            */
     39          
     40          /**
     41            * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
     42            * @param  GPIOx: Select the GPIO peripheral number (x = A to I).
     43            * @retval None
     44            */

   \                                 In section .near_func.text, align 1
     45          void GPIO_DeInit(GPIO_TypeDef* GPIOx)
     46          {
     47            GPIOx->CR2 = GPIO_CR2_RESET_VALUE; /* Reset Control Register 2 */
   \                     GPIO_DeInit:
   \   000000 9093                  LDW       Y, X
   \   000002 72A90004              ADDW      Y, #0x4
   \   000006 4F                    CLR       A
   \   000007 90F7                  LD        (Y), A
     48            GPIOx->ODR = GPIO_ODR_RESET_VALUE; /* Reset Output Data Register */
   \   000009 4F                    CLR       A
   \   00000A F7                    LD        (X), A
     49            GPIOx->DDR = GPIO_DDR_RESET_VALUE; /* Reset Data Direction Register */
   \   00000B 9093                  LDW       Y, X
   \   00000D 72A90002              ADDW      Y, #0x2
   \   000011 4F                    CLR       A
   \   000012 90F7                  LD        (Y), A
     50            GPIOx->CR1 = GPIO_CR1_RESET_VALUE; /* Reset Control Register 1 */
   \   000014 1C0003                ADDW      X, #0x3
   \   000017 4F                    CLR       A
   \   000018 F7                    LD        (X), A
     51          }
   \   000019 81                    RET
     52          
     53          /**
     54            * @brief  Initializes the GPIOx according to the specified parameters.
     55            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
     56            * @param  GPIO_Pin : This parameter contains the pin number, it can be any value
     57            *         of the @ref GPIO_Pin_TypeDef enumeration.
     58            * @param  GPIO_Mode : This parameter can be a value of the
     59            *         @Ref GPIO_Mode_TypeDef enumeration.
     60            * @retval None
     61            */
     62          

   \                                 In section .near_func.text, align 1
     63          void GPIO_Init(GPIO_TypeDef* GPIOx,
     64                         uint8_t GPIO_Pin,
     65                         GPIO_Mode_TypeDef GPIO_Mode)
     66          {
   \                     GPIO_Init:
   \   000000 B700                  LD        S:?b1, A
     67            /*----------------------*/
     68            /* Check the parameters */
     69            /*----------------------*/
     70          
     71            assert_param(IS_GPIO_MODE(GPIO_Mode));
     72            assert_param(IS_GPIO_PIN(GPIO_Pin));
     73          
     74            /* Reset crresponding bit to GPIO_Pin in CR2 register */
     75            GPIOx->CR2 &= (uint8_t)(~(GPIO_Pin));
   \   000002 9093                  LDW       Y, X
   \   000004 72A90004              ADDW      Y, #0x4
   \   000008 B600                  LD        A, S:?b1
   \   00000A 43                    CPL       A
   \   00000B 90F4                  AND       A, (Y)
   \   00000D 9093                  LDW       Y, X
   \   00000F 72A90004              ADDW      Y, #0x4
   \   000013 90F7                  LD        (Y), A
     76          
     77            /*-----------------------------*/
     78            /* Input/Output mode selection */
     79            /*-----------------------------*/
     80          
     81            if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x80) != (uint8_t)0x00) /* Output mode */
   \   000015 B600                  LD        A, S:?b0
   \   000017 A480                  AND       A, #0x80
   \   000019 A100                  CP        A, #0x0
   \   00001B 2727                  JREQ      L:??GPIO_Init_0
     82            {
     83              if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x10) != (uint8_t)0x00) /* High level */
   \   00001D B600                  LD        A, S:?b0
   \   00001F A410                  AND       A, #0x10
   \   000021 A100                  CP        A, #0x0
   \   000023 2706                  JREQ      L:??GPIO_Init_1
     84              {
     85                GPIOx->ODR |= GPIO_Pin;
   \   000025 B600                  LD        A, S:?b1
   \   000027 FA                    OR        A, (X)
   \   000028 F7                    LD        (X), A
   \   000029 2005                  JRA       L:??GPIO_Init_2
     86              } else /* Low level */
     87              {
     88                GPIOx->ODR &= (uint8_t)(~(GPIO_Pin));
   \                     ??GPIO_Init_1:
   \   00002B B600                  LD        A, S:?b1
   \   00002D 43                    CPL       A
   \   00002E F4                    AND       A, (X)
   \   00002F F7                    LD        (X), A
     89              }
     90              /* Set Output mode */
     91              GPIOx->DDR |= GPIO_Pin;
   \                     ??GPIO_Init_2:
   \   000030 9093                  LDW       Y, X
   \   000032 72A90002              ADDW      Y, #0x2
   \   000036 B600                  LD        A, S:?b1
   \   000038 90FA                  OR        A, (Y)
   \   00003A 9093                  LDW       Y, X
   \   00003C 72A90002              ADDW      Y, #0x2
   \   000040 90F7                  LD        (Y), A
   \   000042 2013                  JRA       L:??GPIO_Init_3
     92            } else /* Input mode */
     93            {
     94              /* Set Input mode */
     95              GPIOx->DDR &= (uint8_t)(~(GPIO_Pin));
   \                     ??GPIO_Init_0:
   \   000044 9093                  LDW       Y, X
   \   000046 72A90002              ADDW      Y, #0x2
   \   00004A B600                  LD        A, S:?b1
   \   00004C 43                    CPL       A
   \   00004D 90F4                  AND       A, (Y)
   \   00004F 9093                  LDW       Y, X
   \   000051 72A90002              ADDW      Y, #0x2
   \   000055 90F7                  LD        (Y), A
     96            }
     97          
     98            /*------------------------------------------------------------------------*/
     99            /* Pull-Up/Float (Input) or Push-Pull/Open-Drain (Output) modes selection */
    100            /*------------------------------------------------------------------------*/
    101          
    102            if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x40) != (uint8_t)0x00) /* Pull-Up or Push-Pull */
   \                     ??GPIO_Init_3:
   \   000057 B600                  LD        A, S:?b0
   \   000059 A440                  AND       A, #0x40
   \   00005B A100                  CP        A, #0x0
   \   00005D 2714                  JREQ      L:??GPIO_Init_4
    103            {
    104              GPIOx->CR1 |= GPIO_Pin;
   \   00005F 9093                  LDW       Y, X
   \   000061 72A90003              ADDW      Y, #0x3
   \   000065 B600                  LD        A, S:?b1
   \   000067 90FA                  OR        A, (Y)
   \   000069 9093                  LDW       Y, X
   \   00006B 72A90003              ADDW      Y, #0x3
   \   00006F 90F7                  LD        (Y), A
   \   000071 2013                  JRA       L:??GPIO_Init_5
    105            } else /* Float or Open-Drain */
    106            {
    107              GPIOx->CR1 &= (uint8_t)(~(GPIO_Pin));
   \                     ??GPIO_Init_4:
   \   000073 9093                  LDW       Y, X
   \   000075 72A90003              ADDW      Y, #0x3
   \   000079 B600                  LD        A, S:?b1
   \   00007B 43                    CPL       A
   \   00007C 90F4                  AND       A, (Y)
   \   00007E 9093                  LDW       Y, X
   \   000080 72A90003              ADDW      Y, #0x3
   \   000084 90F7                  LD        (Y), A
    108            }
    109          
    110            /*-----------------------------------------------------*/
    111            /* Interrupt (Input) or Slope (Output) modes selection */
    112            /*-----------------------------------------------------*/
    113          
    114            if ((((uint8_t)(GPIO_Mode)) & (uint8_t)0x20) != (uint8_t)0x00) /* Interrupt or Slow slope */
   \                     ??GPIO_Init_5:
   \   000086 B600                  LD        A, S:?b0
   \   000088 A420                  AND       A, #0x20
   \   00008A A100                  CP        A, #0x0
   \   00008C 270F                  JREQ      L:??GPIO_Init_6
    115            {
    116              GPIOx->CR2 |= GPIO_Pin;
   \   00008E 9093                  LDW       Y, X
   \   000090 72A90004              ADDW      Y, #0x4
   \   000094 B600                  LD        A, S:?b1
   \   000096 90FA                  OR        A, (Y)
   \   000098 1C0004                ADDW      X, #0x4
   \   00009B F7                    LD        (X), A
   \   00009C 81                    RET
    117            } else /* No external interrupt or No slope control */
    118            {
    119              GPIOx->CR2 &= (uint8_t)(~(GPIO_Pin));
   \                     ??GPIO_Init_6:
   \   00009D 9093                  LDW       Y, X
   \   00009F 72A90004              ADDW      Y, #0x4
   \   0000A3 3300                  CPL       S:?b1
   \   0000A5 B600                  LD        A, S:?b1
   \   0000A7 90F4                  AND       A, (Y)
   \   0000A9 1C0004                ADDW      X, #0x4
   \   0000AC F7                    LD        (X), A
    120            }
    121          
    122          }
   \   0000AD 81                    RET
    123          
    124          /**
    125            * @brief  Writes data to the specified GPIO data port.
    126            * @note   The port must be configured in output mode.
    127            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    128            * @param  GPIO_PortVal : Specifies the value to be written to the port output
    129            *         data register.
    130            * @retval None
    131            */

   \                                 In section .near_func.text, align 1
    132          void GPIO_Write(GPIO_TypeDef* GPIOx, uint8_t GPIO_PortVal)
    133          {
    134            GPIOx->ODR = GPIO_PortVal;
   \                     GPIO_Write:
   \   000000 F7                    LD        (X), A
    135          }
   \   000001 81                    RET
    136          
    137          /**
    138            * @brief  Sets or clears the selected data port bit.
    139            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    140            * @param  GPIO_Pin: Specifies the port bit to be written.
    141            *         This parameter can be a value of GPIO_Pin_TypeDef enumeration.
    142            * @param  GPIO_BitVal: specifies the desired status to be written.
    143            *         This parameter can be a value of @ref BitAction enumeration.
    144            * @retval None
    145            */

   \                                 In section .near_func.text, align 1
    146          void GPIO_WriteBit(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef GPIO_Pin, BitAction GPIO_BitVal)
    147          {
    148            /* Check the parameters */
    149            assert_param(IS_GPIO_PIN(GPIO_Pin));
    150            assert_param(IS_STATE_VALUE(GPIO_BitVal));
    151          
    152            if (GPIO_BitVal != RESET)
   \                     GPIO_WriteBit:
   \   000000 3D00                  TNZ       S:?b0
   \   000002 2703                  JREQ      L:??GPIO_WriteBit_0
    153            {
    154              GPIOx->ODR |= GPIO_Pin;
   \   000004 FA                    OR        A, (X)
   \   000005 F7                    LD        (X), A
   \   000006 81                    RET
    155          
    156            }
    157            else
    158            {
    159              GPIOx->ODR &= (uint8_t)(~GPIO_Pin);
   \                     ??GPIO_WriteBit_0:
   \   000007 43                    CPL       A
   \   000008 F4                    AND       A, (X)
   \   000009 F7                    LD        (X), A
    160            }
    161          }
   \   00000A 81                    RET
    162          
    163          /**
    164            * @brief  Writes high level to the specified GPIO pins.
    165            * @note   The port must be configured in output mode.
    166            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    167            * @param  GPIO_Pin : Specifies the pins to be turned high.
    168            * @retval None
    169            */

   \                                 In section .near_func.text, align 1
    170          void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint8_t GPIO_Pin)
    171          {
    172            GPIOx->ODR |= GPIO_Pin;
   \                     GPIO_SetBits:
   \   000000 FA                    OR        A, (X)
   \   000001 F7                    LD        (X), A
    173          }
   \   000002 81                    RET
    174          
    175          /**
    176            * @brief  Writes low level to the specified GPIO pins.
    177            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    178            * @param  GPIO_Pin : Specifies the pins to be turned low
    179            * @retval None
    180            * @par    Required preconditions:
    181            *   The port must be configured in output mode.
    182            */

   \                                 In section .near_func.text, align 1
    183          void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint8_t GPIO_Pin)
    184          {
    185            GPIOx->ODR &= (uint8_t)(~GPIO_Pin);
   \                     GPIO_ResetBits:
   \   000000 43                    CPL       A
   \   000001 F4                    AND       A, (X)
   \   000002 F7                    LD        (X), A
    186          }
   \   000003 81                    RET
    187          
    188          /**
    189            * @brief  Toggles the specified GPIO pins.
    190            * @note   The port must be configured in output mode.
    191            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    192            * @param  GPIO_Pin : Specifies the pins to be toggled.
    193            * @retval None
    194            */

   \                                 In section .near_func.text, align 1
    195          void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint8_t GPIO_Pin)
    196          {
    197            GPIOx->ODR ^= GPIO_Pin;
   \                     GPIO_ToggleBits:
   \   000000 F8                    XOR       A, (X)
   \   000001 F7                    LD        (X), A
    198          }
   \   000002 81                    RET
    199          
    200          /**
    201            * @brief  Reads the specified GPIO input data port.
    202            * @note   The port must be configured in input mode.
    203            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    204            * @retval The GPIOx input data port value.
    205            */

   \                                 In section .near_func.text, align 1
    206          uint8_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
    207          {
    208            return ((uint8_t)GPIOx->IDR);
   \                     GPIO_ReadInputData:
   \   000000 5C                    INCW      X
   \   000001 F6                    LD        A, (X)
   \   000002 81                    RET
    209          }
    210          
    211          /**
    212            * @brief  Reads the specified GPIO output data port.
    213            * @note   The port must be configured in input mode.
    214            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    215            * @retval The GPIOx  output data port value.
    216            */

   \                                 In section .near_func.text, align 1
    217          uint8_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
    218          {
    219            return ((uint8_t)GPIOx->ODR);
   \                     GPIO_ReadOutputData:
   \   000000 F6                    LD        A, (X)
   \   000001 81                    RET
    220          }
    221          
    222          /**
    223            * @brief  Reads the specified GPIO input data pin.
    224            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    225            * @param  GPIO_Pin : Specifies the pin number.
    226            * @retval BitStatus : GPIO input pin status.
    227            */

   \                                 In section .near_func.text, align 1
    228          BitStatus GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef GPIO_Pin)
    229          {
    230            return ((BitStatus)(GPIOx->IDR & (uint8_t)GPIO_Pin));
   \                     GPIO_ReadInputDataBit:
   \   000000 5C                    INCW      X
   \   000001 F4                    AND       A, (X)
   \   000002 81                    RET
    231          }
    232          
    233          /**
    234            * @brief  Reads the specified GPIO Output data pin.
    235            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    236            * @param  GPIO_Pin : Specifies the pin number
    237            * @retval BitStatus : GPIO output pin status.
    238            */

   \                                 In section .near_func.text, align 1
    239          BitStatus GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef GPIO_Pin)
    240          {
    241            return ((BitStatus)(GPIOx->ODR & (uint8_t)GPIO_Pin));
   \                     GPIO_ReadOutputDataBit:
   \   000000 F4                    AND       A, (X)
   \   000001 81                    RET
    242          }
    243          
    244          /**
    245            * @brief  Configures the external pull-up on GPIOx pins.
    246            * @param  GPIOx : Select the GPIO peripheral number (x = A to I).
    247            * @param  GPIO_Pin : Specifies the pin number
    248            * @param  NewState : The new state of the pull up pin.
    249            * @retval None
    250            */

   \                                 In section .near_func.text, align 1
    251          void GPIO_ExternalPullUpConfig(GPIO_TypeDef* GPIOx, uint8_t GPIO_Pin, FunctionalState NewState)
    252          {
    253            /* Check the parameters */
    254            assert_param(IS_GPIO_PIN(GPIO_Pin));
    255            assert_param(IS_FUNCTIONAL_STATE(NewState));
    256          
    257            if (NewState != DISABLE) /* External Pull-Up Set*/
   \                     GPIO_ExternalPullUpConfig:
   \   000000 3D00                  TNZ       S:?b0
   \   000002 270D                  JREQ      L:??GPIO_ExternalPullUpConfig_0
    258            {
    259              GPIOx->CR1 |= GPIO_Pin;
   \   000004 9093                  LDW       Y, X
   \   000006 72A90003              ADDW      Y, #0x3
   \   00000A 90FA                  OR        A, (Y)
   \   00000C 1C0003                ADDW      X, #0x3
   \   00000F F7                    LD        (X), A
   \   000010 81                    RET
    260            } else /* External Pull-Up Reset*/
    261            {
    262              GPIOx->CR1 &= (uint8_t)(~(GPIO_Pin));
   \                     ??GPIO_ExternalPullUpConfig_0:
   \   000011 9093                  LDW       Y, X
   \   000013 72A90003              ADDW      Y, #0x3
   \   000017 43                    CPL       A
   \   000018 90F4                  AND       A, (Y)
   \   00001A 1C0003                ADDW      X, #0x3
   \   00001D F7                    LD        (X), A
    263            }
    264          }
   \   00001E 81                    RET
    265          
    266          /**
    267            * @}
    268            */
    269          
    270          /**
    271            * @}
    272            */
    273          
    274          /******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label            Bytes
     --------------            -----
     GPIO_DeInit                 26
     GPIO_Init                  174
     GPIO_Write                   2
     GPIO_WriteBit               11
     GPIO_SetBits                 3
     GPIO_ResetBits               4
     GPIO_ToggleBits              3
     GPIO_ReadInputData           3
     GPIO_ReadOutputData          2
     GPIO_ReadInputDataBit        3
     GPIO_ReadOutputDataBit       2
     GPIO_ExternalPullUpConfig   31

 
 264 bytes in section .near_func.text
 
 264 bytes of CODE memory

Errors: none
Warnings: none
