###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             11/Mar/2014  17:31:36 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  F:\Skydrive\Final Design\Servo Motor                     #
#                    STM8L\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_b #
#                    eep.c                                                    #
#    Command line =  "F:\Skydrive\Final Design\Servo Motor                    #
#                    STM8L\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_b #
#                    eep.c" -e -Ol --no_cse --no_unroll --no_inline           #
#                    --no_code_motion --no_tbaa --no_cross_call --debug       #
#                    --code_model small --data_model medium -o                #
#                    "F:\Skydrive\Final Design\Servo Motor STM8L\Debug\Obj\"  #
#                    --dlib_config "D:\IAR Systems\Embedded Workbench         #
#                    6.0\stm8\LIB\dlstm8smn.h" -D STM8L15X_MD -lCN            #
#                    "F:\Skydrive\Final Design\Servo Motor                    #
#                    STM8L\Debug\List\" --diag_suppress Pe177,Pe550 -I        #
#                    "F:\Skydrive\Final Design\Servo Motor                    #
#                    STM8L\Project\Discover\inc\" -I "F:\Skydrive\Final       #
#                    Design\Servo Motor STM8L\Libraries\STM8L15x_StdPeriph_Dr #
#                    iver\inc\" --vregs 16                                    #
#    List file    =  F:\Skydrive\Final Design\Servo Motor                     #
#                    STM8L\Debug\List\stm8l15x_beep.lst                       #
#    Object file  =  F:\Skydrive\Final Design\Servo Motor                     #
#                    STM8L\Debug\Obj\stm8l15x_beep.o                          #
#                                                                             #
#                                                                             #
###############################################################################

F:\Skydrive\Final Design\Servo Motor STM8L\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_beep.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8l15x_beep.c
      4            * @author  MCD Application Team
      5            * @version V1.4.0
      6            * @date    09/24/2010
      7            * @brief   This file provides all the BEEP firmware functions.
      8            ******************************************************************************
      9            * @copy
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
     19            */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "stm8l15x_beep.h"
     23          
     24          /** @addtogroup STM8L15x_StdPeriph_Driver
     25            * @{
     26            */
     27          
     28          /* Private typedef -----------------------------------------------------------*/
     29          /* Private define ------------------------------------------------------------*/
     30          /* Private macro -------------------------------------------------------------*/
     31          /* Private variables ---------------------------------------------------------*/
     32          /* Private function prototypes -----------------------------------------------*/
     33          /* Private functions ---------------------------------------------------------*/
     34          /* Public functions ----------------------------------------------------------*/
     35          
     36          /**
     37            * @addtogroup BEEP_Public_Functions
     38            * @{
     39            */
     40          
     41          /**
     42            * @brief  Deinitializes the BEEP peripheral registers to their default
     43            *         reset values.
     44            * @param  None
     45            * @retval None
     46            */

   \                                 In section .near_func.text, align 1
     47          void BEEP_DeInit(void)
     48          {
     49            BEEP->CSR1 = BEEP_CSR1_RESET_VALUE;
   \                     BEEP_DeInit:
   \   000000 350050F0              MOV       L:0x50f0, #0x0
     50            BEEP->CSR2 = BEEP_CSR2_RESET_VALUE;
   \   000004 351F50F3              MOV       L:0x50f3, #0x1f
     51          }
   \   000008 81                    RET
     52          
     53          /**
     54            * @brief  Initializes the BEEP function according to the specified parameters.
     55            * @note   The LS RC calibration must be performed before calling this function.
     56            * @param  BEEP_Frequency Frequency selection.
     57            *         This parameter can be one of the values of @ref BEEP_Frequency_TypeDef.
     58            * @retval None
     59            */

   \                                 In section .near_func.text, align 1
     60          void BEEP_Init(BEEP_Frequency_TypeDef BEEP_Frequency)
     61          {
   \                     BEEP_Init:
   \   000000 B700                  LD        S:?b0, A
     62          
     63            /* Check parameter */
     64            assert_param(IS_BEEP_FREQUENCY(BEEP_Frequency));
     65          
     66            /* Set a default calibration value if no calibration is done */
     67            if ((BEEP->CSR2 & BEEP_CSR2_BEEPDIV) == BEEP_CSR2_BEEPDIV)
   \   000002 C650F3                LD        A, L:0x50f3
   \   000005 A41F                  AND       A, #0x1f
   \   000007 A11F                  CP        A, #0x1f
   \   000009 260C                  JRNE      L:??BEEP_Init_0
     68            {
     69              BEEP->CSR2 &= (uint8_t)(~BEEP_CSR2_BEEPDIV); /* Clear bits */
   \   00000B C650F3                LD        A, L:0x50f3
   \   00000E A4E0                  AND       A, #0xe0
   \   000010 C750F3                LD        L:0x50f3, A
     70              BEEP->CSR2 |= BEEP_CALIBRATION_DEFAULT;
   \   000013 721050F3              BSET      L:0x50f3, #0x0
     71            }
     72          
     73            /* Select the output frequency */
     74            BEEP->CSR2 &= (uint8_t)(~BEEP_CSR2_BEEPSEL);
   \                     ??BEEP_Init_0:
   \   000017 C650F3                LD        A, L:0x50f3
   \   00001A A43F                  AND       A, #0x3f
   \   00001C C750F3                LD        L:0x50f3, A
     75            BEEP->CSR2 |= (uint8_t)(BEEP_Frequency);
   \   00001F B600                  LD        A, S:?b0
   \   000021 CA50F3                OR        A, L:0x50f3
   \   000024 C750F3                LD        L:0x50f3, A
     76          
     77          }
   \   000027 81                    RET
     78          
     79          /**
     80            * @brief  Enable or disable the BEEP function.
     81            * @note   Initialisation of BEEP and LS RC calibration must be done before.
     82            * @param  NewState Indicates the new state of the BEEP function.
     83            * @retval None
     84            */

   \                                 In section .near_func.text, align 1
     85          void BEEP_Cmd(FunctionalState NewState)
     86          {
     87            /* Check the parameters */
     88            assert_param(IS_FUNCTIONAL_STATE(NewState));
     89          
     90            if (NewState != DISABLE)
   \                     BEEP_Cmd:
   \   000000 4D                    TNZ       A
   \   000001 2705                  JREQ      L:??BEEP_Cmd_0
     91            {
     92              /* Enable the BEEP peripheral */
     93              BEEP->CSR2 |= BEEP_CSR2_BEEPEN;
   \   000003 721A50F3              BSET      L:0x50f3, #0x5
   \   000007 81                    RET
     94            }
     95            else
     96            {
     97              /* Disable the BEEP peripheral */
     98              BEEP->CSR2 &= (uint8_t)(~BEEP_CSR2_BEEPEN);
   \                     ??BEEP_Cmd_0:
   \   000008 721B50F3              BRES      L:0x50f3, #0x5
     99            }
    100          }
   \   00000C 81                    RET
    101          
    102          /**
    103            * @brief  Enable or disable the LS clock source connection to TIM for measurement.
    104            * @param  NewState Indicates the new state of the LS clcok to TIM connection
    105            * @retval None
    106            */

   \                                 In section .near_func.text, align 1
    107          void BEEP_LSClockToTIMConnectCmd(FunctionalState NewState)
    108          {
    109            /* Check the parameters */
    110            assert_param(IS_FUNCTIONAL_STATE(NewState));
    111          
    112            if (NewState != DISABLE)
   \                     BEEP_LSClockToTIMConnectCmd:
   \   000000 4D                    TNZ       A
   \   000001 2705                  JREQ      L:??BEEP_LSClockToTIMConnectCmd_0
    113            {
    114              /* Connect LS clock to TIM for meeasurement */
    115              BEEP->CSR1 |= BEEP_CSR1_MSR;
   \   000003 721050F0              BSET      L:0x50f0, #0x0
   \   000007 81                    RET
    116            }
    117            else
    118            {
    119              /* Disconnect LS clock to TIM */
    120              BEEP->CSR1 &= (uint8_t)(~BEEP_CSR1_MSR);
   \                     ??BEEP_LSClockToTIMConnectCmd_0:
   \   000008 721150F0              BRES      L:0x50f0, #0x0
    121            }
    122          }
   \   00000C 81                    RET
    123          /**
    124            * @brief  Update CSR register with the measured LSI frequency.
    125            * @note   BEEP must be disabled to avoid unwanted interrupts.
    126            * @note   Prescaler calculation:
    127            *         A is the integer part of LSIFreqkHz/4 and x the decimal part.
    128            *         x <= A/(1+2A) is equivalent to A >= x(1+2A)
    129            *         and also to 4A >= 4x(1+2A) [F1]
    130            *         but we know that A + x = LSIFreqkHz/4 ==> 4x = LSIFreqkHz-4A
    131            *         so [F1] can be written :
    132            *         4A >= (LSIFreqkHz-4A)(1+2A)
    133            * @param  LSIFreqHz Low Speed RC frequency measured by timer (in Hz).
    134            * @retval None
    135            */

   \                                 In section .near_func.text, align 1
    136          void BEEP_LSICalibrationConfig(uint32_t LSIFreqHz)
    137          {
    138            uint16_t lsifreqkhz;
    139            uint16_t A;
    140          
    141            /* Check parameter */
    142            assert_param(IS_LSI_FREQUENCY(LSIFreqHz));
    143          
    144            lsifreqkhz = (uint16_t)(LSIFreqHz / 1000); /* Converts value in kHz */
   \                     BEEP_LSICalibrationConfig:
   \   000000 CD0000                CALL      L:?udiv32_l0_l0_dl
   \   000003 000003E8              DC32      0x3e8
    145          
    146            /* Calculation of BEEPER calibration value */
    147          
    148            BEEP->CSR2 &= (uint8_t)(~BEEP_CSR2_BEEPDIV); /* Clear bits */
   \   000007 C650F3                LD        A, L:0x50f3
   \   00000A A4E0                  AND       A, #0xe0
   \   00000C C750F3                LD        L:0x50f3, A
    149          
    150            A = (uint16_t)(lsifreqkhz >> 3U); /* Division by 8, keep integer part only */
   \   00000F BE00                  LDW       X, S:?w1
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 54                    SRLW      X
   \   000014 9093                  LDW       Y, X
    151          
    152            if ((8U * A) >= ((lsifreqkhz - (8U * A)) * (1U + (2U * A))))
   \   000016 AE0008                LDW       X, #0x8
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 93                    LDW       X, Y
   \   00001C CD0000                CALL      L:?mul16_x_x_w0
   \   00001F BF00                  LDW       S:?w0, X
   \   000021 BE00                  LDW       X, S:?w1
   \   000023 72B00000              SUBW      X, S:?w0
   \   000027 BF00                  LDW       S:?w1, X
   \   000029 93                    LDW       X, Y
   \   00002A 58                    SLLW      X
   \   00002B 5C                    INCW      X
   \   00002C BF00                  LDW       S:?w0, X
   \   00002E BE00                  LDW       X, S:?w1
   \   000030 CD0000                CALL      L:?mul16_x_x_w0
   \   000033 BF00                  LDW       S:?w1, X
   \   000035 AE0008                LDW       X, #0x8
   \   000038 BF00                  LDW       S:?w0, X
   \   00003A 93                    LDW       X, Y
   \   00003B CD0000                CALL      L:?mul16_x_x_w0
   \   00003E B300                  CPW       X, S:?w1
   \   000040 250B                  JRC       L:??BEEP_LSICalibrationConfig_0
    153            {
    154              BEEP->CSR2 |= (uint8_t)(A - 2U);
   \   000042 909F                  LD        A, YL
   \   000044 ABFE                  ADD       A, #0xfe
   \   000046 CA50F3                OR        A, L:0x50f3
   \   000049 C750F3                LD        L:0x50f3, A
   \   00004C 81                    RET
    155            }
    156            else
    157            {
    158              BEEP->CSR2 |= (uint8_t)(A - 1U);
   \                     ??BEEP_LSICalibrationConfig_0:
   \   00004D 909F                  LD        A, YL
   \   00004F ABFF                  ADD       A, #0xff
   \   000051 CA50F3                OR        A, L:0x50f3
   \   000054 C750F3                LD        L:0x50f3, A
    159            }
    160          }
   \   000057 81                    RET
    161          
    162          /**
    163            * @}
    164            */
    165          
    166          /**
    167            * @}
    168            */
    169          
    170          /******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label              Bytes
     --------------              -----
     BEEP_DeInit                    9
     BEEP_Init                     40
     BEEP_Cmd                      13
     BEEP_LSClockToTIMConnectCmd   13
     BEEP_LSICalibrationConfig     88

 
 163 bytes in section .near_func.text
 
 163 bytes of CODE memory

Errors: none
Warnings: none
