###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             11/Mar/2014  17:31:39 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  F:\Skydrive\Final Design\Servo Motor                     #
#                    STM8L\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_p #
#                    wr.c                                                     #
#    Command line =  "F:\Skydrive\Final Design\Servo Motor                    #
#                    STM8L\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_p #
#                    wr.c" -e -Ol --no_cse --no_unroll --no_inline            #
#                    --no_code_motion --no_tbaa --no_cross_call --debug       #
#                    --code_model small --data_model medium -o                #
#                    "F:\Skydrive\Final Design\Servo Motor STM8L\Debug\Obj\"  #
#                    --dlib_config "D:\IAR Systems\Embedded Workbench         #
#                    6.0\stm8\LIB\dlstm8smn.h" -D STM8L15X_MD -lCN            #
#                    "F:\Skydrive\Final Design\Servo Motor                    #
#                    STM8L\Debug\List\" --diag_suppress Pe177,Pe550 -I        #
#                    "F:\Skydrive\Final Design\Servo Motor                    #
#                    STM8L\Project\Discover\inc\" -I "F:\Skydrive\Final       #
#                    Design\Servo Motor STM8L\Libraries\STM8L15x_StdPeriph_Dr #
#                    iver\inc\" --vregs 16                                    #
#    List file    =  F:\Skydrive\Final Design\Servo Motor                     #
#                    STM8L\Debug\List\stm8l15x_pwr.lst                        #
#    Object file  =  F:\Skydrive\Final Design\Servo Motor                     #
#                    STM8L\Debug\Obj\stm8l15x_pwr.o                           #
#                                                                             #
#                                                                             #
###############################################################################

F:\Skydrive\Final Design\Servo Motor STM8L\Libraries\STM8L15x_StdPeriph_Driver\src\stm8l15x_pwr.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8l15x_pwr.c
      4            * @author  MCD Application Team
      5            * @version V1.4.0
      6            * @date    09/24/2010
      7            * @brief   This file provides all the PWR firmware functions.
      8            ******************************************************************************
      9            * @copy
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
     19            */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "stm8l15x_pwr.h"
     23          
     24          /** @addtogroup STM8L15x_StdPeriph_Driver
     25            * @{
     26            */
     27          
     28          /* Private typedef -----------------------------------------------------------*/
     29          /* Private define ------------------------------------------------------------*/
     30          /* Private macro -------------------------------------------------------------*/
     31          /* Private variables ---------------------------------------------------------*/
     32          /* Private function prototypes -----------------------------------------------*/
     33          /* Private functions ---------------------------------------------------------*/
     34          /* Public functions ----------------------------------------------------------*/
     35          
     36          /**
     37            * @addtogroup PWR_Public_Functions
     38            * @{
     39            */
     40          
     41          /**
     42            * @brief  Deinitializes the PWR peripheral registers to their default reset values.
     43            * @param  None
     44            * @retval None
     45            */

   \                                 In section .near_func.text, align 1
     46          void PWR_DeInit(void)
     47          {
     48            PWR->CSR1 = PWR_CSR1_PVDIF;
   \                     PWR_DeInit:
   \   000000 352050B2              MOV       L:0x50b2, #0x20
     49            PWR->CSR2 = PWR_CSR2_RESET_VALUE;
   \   000004 350050B3              MOV       L:0x50b3, #0x0
     50          }
   \   000008 81                    RET
     51          
     52          /**
     53            * @brief  Enable or disable the PWR fast wake up function.
     54            * @param  NewState : Indicates the new state of the PWR fast wake up .
     55            * @retval None
     56            */

   \                                 In section .near_func.text, align 1
     57          void PWR_FastWakeUpCmd(FunctionalState NewState)
     58          {
     59            /* Check the parameters */
     60            assert_param(IS_FUNCTIONAL_STATE(NewState));
     61          
     62            if (NewState != DISABLE)
   \                     PWR_FastWakeUpCmd:
   \   000000 4D                    TNZ       A
   \   000001 2705                  JREQ      L:??PWR_FastWakeUpCmd_0
     63            {
     64              /* Enable the PWR FWU */
     65              PWR->CSR2 |= PWR_CSR2_FWU;
   \   000003 721450B3              BSET      L:0x50b3, #0x2
   \   000007 81                    RET
     66            }
     67            else
     68            {
     69              /* Disable the PWR FWU */
     70              PWR->CSR2 &= (uint8_t)(~PWR_CSR2_FWU);
   \                     ??PWR_FastWakeUpCmd_0:
   \   000008 721550B3              BRES      L:0x50b3, #0x2
     71            }
     72          }
   \   00000C 81                    RET
     73          
     74          /**
     75            * @brief  Enable or disable the PWR Ultra Low Power (ULP) function.
     76            * @param  NewState :  Indicates the new state of the PWR ULP.
     77            * @retval None
     78            */

   \                                 In section .near_func.text, align 1
     79          void PWR_UltraLowPowerCmd(FunctionalState NewState)
     80          {
     81            /* Check the parameters */
     82            assert_param(IS_FUNCTIONAL_STATE(NewState));
     83          
     84            if (NewState != DISABLE)
   \                     PWR_UltraLowPowerCmd:
   \   000000 4D                    TNZ       A
   \   000001 2705                  JREQ      L:??PWR_UltraLowPowerCmd_0
     85            {
     86              /* Enable the PWR ULP */
     87              PWR->CSR2 |= PWR_CSR2_ULP;
   \   000003 721250B3              BSET      L:0x50b3, #0x1
   \   000007 81                    RET
     88            }
     89            else
     90            {
     91              /* Disable the PWR ULP */
     92              PWR->CSR2 &= (uint8_t)(~PWR_CSR2_ULP);
   \                     ??PWR_UltraLowPowerCmd_0:
   \   000008 721350B3              BRES      L:0x50b3, #0x1
     93            }
     94          }
   \   00000C 81                    RET
     95          
     96          /**
     97            * @brief  Enable or disable the PWR Programmable Voltage Detector (PVD) function.
     98            * @param  NewState : Indicates the new state of the PWR PVD.
     99            * @retval None
    100            */

   \                                 In section .near_func.text, align 1
    101          void PWR_PVDCmd(FunctionalState NewState)
    102          {
    103            /* Check the parameters */
    104            assert_param(IS_FUNCTIONAL_STATE(NewState));
    105          
    106            if (NewState != DISABLE)
   \                     PWR_PVDCmd:
   \   000000 4D                    TNZ       A
   \   000001 2705                  JREQ      L:??PWR_PVDCmd_0
    107            {
    108              /* Enable the PWR PVD */
    109              PWR->CSR1 |= PWR_CSR1_PVDE;
   \   000003 721050B2              BSET      L:0x50b2, #0x0
   \   000007 81                    RET
    110            }
    111            else
    112            {
    113              /* Disable the PWR PVD */
    114              PWR->CSR1 &= (uint8_t)(~PWR_CSR1_PVDE);
   \                     ??PWR_PVDCmd_0:
   \   000008 721150B2              BRES      L:0x50b2, #0x0
    115            }
    116          }
   \   00000C 81                    RET
    117          
    118          /**
    119            * @brief  Configures the Programmable Voltage Detector (PVD) Interrupt .
    120            * @param  NewState : Indicates the new state of the PVD interrupt.
    121            * @retval None
    122            */

   \                                 In section .near_func.text, align 1
    123          void PWR_PVDITConfig(FunctionalState NewState)
    124          {
    125            /* Check the parameters */
    126            assert_param(IS_FUNCTIONAL_STATE(NewState));
    127          
    128            if (NewState != DISABLE)
   \                     PWR_PVDITConfig:
   \   000000 4D                    TNZ       A
   \   000001 2705                  JREQ      L:??PWR_PVDITConfig_0
    129            {
    130              /* Enable the PVD interrupt */
    131              PWR->CSR1 |= PWR_CSR1_PVDIEN;
   \   000003 721850B2              BSET      L:0x50b2, #0x4
   \   000007 81                    RET
    132            }
    133            else
    134            {
    135              /* Disable the PVD interrupt */
    136              PWR->CSR1 &= (uint8_t)(~PWR_CSR1_PVDIEN);
   \                     ??PWR_PVDITConfig_0:
   \   000008 721950B2              BRES      L:0x50b2, #0x4
    137            }
    138          }
   \   00000C 81                    RET
    139          
    140          /**
    141            * @brief  Configures the Programmable Voltage Detector (PVD)  levels .
    142            * @param  PWR_PVDLevel : Indicates the new level of the PWR PVD.
    143            *         This paramter can be value of @ref PWR_PVDLevel_TypeDef
    144            * @retval None
    145            */

   \                                 In section .near_func.text, align 1
    146          void PWR_PVDLevelConfig(PWR_PVDLevel_TypeDef PWR_PVDLevel)
    147          {
   \                     PWR_PVDLevelConfig:
   \   000000 B700                  LD        S:?b0, A
    148            /* Check the parameters */
    149            assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
    150          
    151            /* Clear the PVD level */
    152            PWR->CSR1 &= (uint8_t)(~PWR_CSR1_PLS);
   \   000002 C650B2                LD        A, L:0x50b2
   \   000005 A4F1                  AND       A, #0xf1
   \   000007 C750B2                LD        L:0x50b2, A
    153          
    154            /* Configure the PVD level */
    155            PWR->CSR1 |= PWR_PVDLevel;
   \   00000A B600                  LD        A, S:?b0
   \   00000C CA50B2                OR        A, L:0x50b2
   \   00000F C750B2                LD        L:0x50b2, A
    156          
    157          }
   \   000012 81                    RET
    158          
    159          /**
    160            * @brief  Checks whether the specified PWR flag is set or not.
    161            * @param  PWR_FLAG : Flag to check.
    162            *         This paramter can be value of @ref PWR_Flag_TypeDef
    163            * @retval FlagStatus: status of the checked flag
    164            */

   \                                 In section .near_func.text, align 1
    165          FlagStatus PWR_GetFlagStatus(PWR_FLAG_TypeDef PWR_FLAG)
    166          {
   \                     PWR_GetFlagStatus:
   \   000000 B700                  LD        S:?b1, A
    167            FlagStatus bitstatus = RESET;
   \   000002 3F00                  CLR       S:?b0
    168          
    169            /* Check the parameters */
    170            assert_param(IS_PWR_FLAG(PWR_FLAG));
    171          
    172            if ((PWR_FLAG & PWR_FLAG_VREFINTF) != 0)
   \   000004 B600                  LD        A, S:?b1
   \   000006 A401                  AND       A, #0x1
   \   000008 A100                  CP        A, #0x0
   \   00000A 270F                  JREQ      L:??PWR_GetFlagStatus_0
    173            {
    174              if ((PWR->CSR2 & PWR_CR2_VREFINTF) != (uint8_t)RESET )
   \   00000C 720150B306            BTJF      L:0x50b3, #0x0, L:??PWR_GetFlagStatus_1
    175              {
    176                bitstatus = SET;
   \   000011 35010000              MOV       S:?b0, #0x1
   \   000015 2015                  JRA       L:??PWR_GetFlagStatus_2
    177              }
    178              else
    179              {
    180                bitstatus = RESET;
   \                     ??PWR_GetFlagStatus_1:
   \   000017 3F00                  CLR       S:?b0
   \   000019 2011                  JRA       L:??PWR_GetFlagStatus_2
    181              }
    182            }
    183            else
    184            {
    185              if ((PWR->CSR1 & PWR_FLAG) != (uint8_t)RESET )
   \                     ??PWR_GetFlagStatus_0:
   \   00001B B600                  LD        A, S:?b1
   \   00001D C450B2                AND       A, L:0x50b2
   \   000020 A100                  CP        A, #0x0
   \   000022 2706                  JREQ      L:??PWR_GetFlagStatus_3
    186              {
    187                bitstatus = SET;
   \   000024 35010000              MOV       S:?b0, #0x1
   \   000028 2002                  JRA       L:??PWR_GetFlagStatus_2
    188              }
    189              else
    190              {
    191                bitstatus = RESET;
   \                     ??PWR_GetFlagStatus_3:
   \   00002A 3F00                  CLR       S:?b0
    192              }
    193            }
    194          
    195            /* Return the flag status */
    196            return((FlagStatus)bitstatus);
   \                     ??PWR_GetFlagStatus_2:
   \   00002C B600                  LD        A, S:?b0
   \   00002E 81                    RET
    197          }
    198          /**
    199            * @brief  Clears the PWR PVDIF Flag.
    200            * @param  None
    201            * @retval None
    202            */

   \                                 In section .near_func.text, align 1
    203          void PWR_PVDClearFlag(void)
    204          {
    205            /* Set the PVDIF to clear it */
    206            PWR->CSR1 |= PWR_CSR1_PVDIF;
   \                     PWR_PVDClearFlag:
   \   000000 721A50B2              BSET      L:0x50b2, #0x5
    207          }
   \   000004 81                    RET
    208          
    209          /**
    210            * @brief  Checks whether the PVD interrupt has occurred or not.
    211            * @param  None
    212            * @retval ITStatus : The new state of the PVD Interrupt.
    213            */

   \                                 In section .near_func.text, align 1
    214          ITStatus PWR_PVDGetITStatus(void)
    215          {
    216            ITStatus bitstatus = RESET;
   \                     PWR_PVDGetITStatus:
   \   000000 3F00                  CLR       S:?b0
    217          
    218            uint8_t PVD_itStatus = 0x0, PVD_itEnable = 0x0;
   \   000002 3F00                  CLR       S:?b2
   \   000004 3F00                  CLR       S:?b1
    219          
    220            PVD_itStatus = (uint8_t)(PWR->CSR1 & (uint8_t)PWR_CSR1_PVDIF);
   \   000006 C650B2                LD        A, L:0x50b2
   \   000009 A420                  AND       A, #0x20
   \   00000B B700                  LD        S:?b2, A
    221            PVD_itEnable = (uint8_t)(PWR->CSR1 & (uint8_t)PWR_CSR1_PVDIEN);
   \   00000D C650B2                LD        A, L:0x50b2
   \   000010 A410                  AND       A, #0x10
   \   000012 B700                  LD        S:?b1, A
    222          
    223            if ((PVD_itStatus != (uint8_t)RESET ) && (PVD_itEnable != (uint8_t)RESET))
   \   000014 3D00                  TNZ       S:?b2
   \   000016 270A                  JREQ      L:??PWR_PVDGetITStatus_0
   \   000018 3D00                  TNZ       S:?b1
   \   00001A 2706                  JREQ      L:??PWR_PVDGetITStatus_0
    224            {
    225              bitstatus = (ITStatus)SET;
   \   00001C 35010000              MOV       S:?b0, #0x1
   \   000020 2002                  JRA       L:??PWR_PVDGetITStatus_1
    226            }
    227            else
    228            {
    229              bitstatus = (ITStatus)RESET;
   \                     ??PWR_PVDGetITStatus_0:
   \   000022 3F00                  CLR       S:?b0
    230            }
    231            return ((ITStatus)bitstatus);
   \                     ??PWR_PVDGetITStatus_1:
   \   000024 B600                  LD        A, S:?b0
   \   000026 81                    RET
    232          }
    233          
    234          /**
    235            * @brief  Clears the PWR interrupt pending bit.
    236            * @param  None
    237            * @retval None
    238            */

   \                                 In section .near_func.text, align 1
    239          void PWR_PVDClearITPendingBit(void)
    240          {
    241            /* Set the PVDIF to clear it */
    242            PWR->CSR1 |= PWR_CSR1_PVDIF;
   \                     PWR_PVDClearITPendingBit:
   \   000000 721A50B2              BSET      L:0x50b2, #0x5
    243          }
   \   000004 81                    RET
    244          
    245          /**
    246            * @}
    247            */
    248          
    249          /**
    250            * @}
    251            */
    252          
    253          /******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label           Bytes
     --------------           -----
     PWR_DeInit                  9
     PWR_FastWakeUpCmd          13
     PWR_UltraLowPowerCmd       13
     PWR_PVDCmd                 13
     PWR_PVDITConfig            13
     PWR_PVDLevelConfig         19
     PWR_GetFlagStatus          47
     PWR_PVDClearFlag            5
     PWR_PVDGetITStatus         39
     PWR_PVDClearITPendingBit    5

 
 176 bytes in section .near_func.text
 
 176 bytes of CODE memory

Errors: none
Warnings: none
