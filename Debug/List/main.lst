###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             18/Apr/2014  12:44:17 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  F:\Skydrive\Final Design\Servo Motor                     #
#                    STM8L\Project\Discover\src\main.c                        #
#    Command line =  "F:\Skydrive\Final Design\Servo Motor                    #
#                    STM8L\Project\Discover\src\main.c" -e -Ol --no_cse       #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_cross_call --debug --code_model small --data_model  #
#                    medium -o "F:\Skydrive\Final Design\Servo Motor          #
#                    STM8L\Debug\Obj\" --dlib_config "D:\IAR                  #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8smn.h" -D  #
#                    STM8L15X_MD -lCN "F:\Skydrive\Final Design\Servo Motor   #
#                    STM8L\Debug\List\" --diag_suppress Pe177,Pe550 -I        #
#                    "F:\Skydrive\Final Design\Servo Motor                    #
#                    STM8L\Project\Discover\inc\" -I "F:\Skydrive\Final       #
#                    Design\Servo Motor STM8L\Libraries\STM8L15x_StdPeriph_Dr #
#                    iver\inc\" --vregs 16                                    #
#    List file    =  F:\Skydrive\Final Design\Servo Motor                     #
#                    STM8L\Debug\List\main.lst                                #
#    Object file  =  F:\Skydrive\Final Design\Servo Motor                     #
#                    STM8L\Debug\Obj\main.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

F:\Skydrive\Final Design\Servo Motor STM8L\Project\Discover\src\main.c
      1          
      2          /* Includes ------------------------------------------------------------------*/
      3          #include "stm8l15x.h"
      4          #include "stm8l15x_it.c"

   \                                 In section .near.rodata, align 1
   \   uint16_t const BUFFER_SIZE
   \                     BUFFER_SIZE:
   \   000000 000A                  DC16 10

   \                                 In section .near.bss, align 1
   \   unsigned char usart_buffer[10]
   \                     usart_buffer:
   \   000000                       DS8 10

   \                                 In section .near.bss, align 1
   \   uint16_t current_buffer_position
   \                     current_buffer_position:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
   \   uint16_t current_buffer_size
   \                     current_buffer_size:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
   \   short degree_interval
   \                     degree_interval:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
   \   short time_interval
   \                     time_interval:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
   \   bool config_complete_flag
   \                     config_complete_flag:
   \   000000                       DS8 1

   \                                 In section .near_func.text, align 1
   \   __interrupt void NonHandledInterrupt(void)
   \                     NonHandledInterrupt:
   \                     _interrupt_2:
   \   000000 20FE                  JRA       L:_interrupt_2

   \                                 In section .near_func.text, align 1
   \   __interrupt void TRAP_IRQHandler(void)
   \                     TRAP_IRQHandler:
   \                     _interrupt_1:
   \   000000 20FE                  JRA       L:_interrupt_1

   \                                 In section .near_func.text, align 1
   \   __interrupt void FLASH_IRQHandler(void)
   \                     FLASH_IRQHandler:
   \                     _interrupt_3:
   \   000000 20FE                  JRA       L:_interrupt_3

   \                                 In section .near_func.text, align 1
   \   __interrupt void DMA1_CHANNEL0_1_IRQHandler(void)
   \                     DMA1_CHANNEL0_1_IRQHandler:
   \                     _interrupt_4:
   \   000000 20FE                  JRA       L:_interrupt_4

   \                                 In section .near_func.text, align 1
   \   __interrupt void DMA1_CHANNEL2_3_IRQHandler(void)
   \                     DMA1_CHANNEL2_3_IRQHandler:
   \                     _interrupt_5:
   \   000000 20FE                  JRA       L:_interrupt_5

   \                                 In section .near_func.text, align 1
   \   __interrupt void RTC_IRQHandler(void)
   \                     RTC_IRQHandler:
   \                     _interrupt_6:
   \   000000 20FE                  JRA       L:_interrupt_6

   \                                 In section .near_func.text, align 1
   \   __interrupt void EXTIE_F_PVD_IRQHandler(void)
   \                     EXTIE_F_PVD_IRQHandler:
   \                     _interrupt_7:
   \   000000 20FE                  JRA       L:_interrupt_7

   \                                 In section .near_func.text, align 1
   \   __interrupt void EXTIB_IRQHandler(void)
   \                     EXTIB_IRQHandler:
   \                     _interrupt_8:
   \   000000 20FE                  JRA       L:_interrupt_8

   \                                 In section .near_func.text, align 1
   \   __interrupt void EXTID_IRQHandler(void)
   \                     EXTID_IRQHandler:
   \                     _interrupt_9:
   \   000000 20FE                  JRA       L:_interrupt_9

   \                                 In section .near_func.text, align 1
   \   __interrupt void EXTI0_IRQHandler(void)
   \                     EXTI0_IRQHandler:
   \                     _interrupt_10:
   \   000000 20FE                  JRA       L:_interrupt_10

   \                                 In section .near_func.text, align 1
   \   __interrupt void EXTI1_IRQHandler(void)
   \                     EXTI1_IRQHandler:
   \                     _interrupt_11:
   \   000000 80                    IRET

   \                                 In section .near_func.text, align 1
   \   __interrupt void EXTI2_IRQHandler(void)
   \                     EXTI2_IRQHandler:
   \                     _interrupt_12:
   \   000000 20FE                  JRA       L:_interrupt_12

   \                                 In section .near_func.text, align 1
   \   __interrupt void EXTI3_IRQHandler(void)
   \                     EXTI3_IRQHandler:
   \                     _interrupt_13:
   \   000000 20FE                  JRA       L:_interrupt_13

   \                                 In section .near_func.text, align 1
   \   __interrupt void EXTI4_IRQHandler(void)
   \                     EXTI4_IRQHandler:
   \                     _interrupt_14:
   \   000000 20FE                  JRA       L:_interrupt_14

   \                                 In section .near_func.text, align 1
   \   __interrupt void EXTI5_IRQHandler(void)
   \                     EXTI5_IRQHandler:
   \                     _interrupt_15:
   \   000000 20FE                  JRA       L:_interrupt_15

   \                                 In section .near_func.text, align 1
   \   __interrupt void EXTI6_IRQHandler(void)
   \                     EXTI6_IRQHandler:
   \                     _interrupt_16:
   \   000000 80                    IRET

   \                                 In section .near_func.text, align 1
   \   __interrupt void EXTI7_IRQHandler(void)
   \                     EXTI7_IRQHandler:
   \                     _interrupt_17:
   \   000000 20FE                  JRA       L:_interrupt_17

   \                                 In section .near_func.text, align 1
   \   __interrupt void LCD_IRQHandler(void)
   \                     LCD_IRQHandler:
   \                     _interrupt_18:
   \   000000 20FE                  JRA       L:_interrupt_18

   \                                 In section .near_func.text, align 1
   \   __interrupt void SWITCH_CSS_BREAK_DAC_IRQHandler(void)
   \                     SWITCH_CSS_BREAK_DAC_IRQHandler:
   \                     _interrupt_19:
   \   000000 20FE                  JRA       L:_interrupt_19

   \                                 In section .near_func.text, align 1
   \   __interrupt void ADC1_COMP_IRQHandler(void)
   \                     ADC1_COMP_IRQHandler:
   \                     _interrupt_20:
   \   000000 20FE                  JRA       L:_interrupt_20

   \                                 In section .near_func.text, align 1
   \   __interrupt void TIM2_UPD_OVF_TRG_BRK_IRQHandler(void)
   \                     TIM2_UPD_OVF_TRG_BRK_IRQHandler:
   \                     _interrupt_21:
   \   000000 20FE                  JRA       L:_interrupt_21

   \                                 In section .near_func.text, align 1
   \   __interrupt void TIM2_CAP_IRQHandler(void)
   \                     TIM2_CAP_IRQHandler:
   \                     _interrupt_22:
   \   000000 20FE                  JRA       L:_interrupt_22

   \                                 In section .near_func.text, align 1
   \   __interrupt void TIM3_UPD_OVF_TRG_BRK_IRQHandler(void)
   \                     TIM3_UPD_OVF_TRG_BRK_IRQHandler:
   \                     _interrupt_23:
   \   000000 20FE                  JRA       L:_interrupt_23

   \                                 In section .near_func.text, align 1
   \   __interrupt void TIM3_CAP_IRQHandler(void)
   \                     TIM3_CAP_IRQHandler:
   \                     _interrupt_24:
   \   000000 20FE                  JRA       L:_interrupt_24

   \                                 In section .near_func.text, align 1
   \   __interrupt void TIM1_UPD_OVF_TRG_COM_IRQHandler(void)
   \                     TIM1_UPD_OVF_TRG_COM_IRQHandler:
   \                     _interrupt_25:
   \   000000 20FE                  JRA       L:_interrupt_25

   \                                 In section .near_func.text, align 1
   \   __interrupt void TIM1_CAP_IRQHandler(void)
   \                     TIM1_CAP_IRQHandler:
   \                     _interrupt_26:
   \   000000 20FE                  JRA       L:_interrupt_26

   \                                 In section .near_func.text, align 1
   \   __interrupt void TIM4_UPD_OVF_TRG_IRQHandler(void)
   \                     TIM4_UPD_OVF_TRG_IRQHandler:
   \                     _interrupt_27:
   \   000000 20FE                  JRA       L:_interrupt_27

   \                                 In section .near_func.text, align 1
   \   __interrupt void SPI1_IRQHandler(void)
   \                     SPI1_IRQHandler:
   \                     _interrupt_28:
   \   000000 20FE                  JRA       L:_interrupt_28

   \                                 In section .near_func.text, align 1
   \   __interrupt void USART1_TX_IRQHandler(void)
   \                     USART1_TX_IRQHandler:
   \                     _interrupt_29:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 CD0000                CALL      L:?push_l0
   \   000009 CD0000                CALL      L:?push_l1
   \   00000C A680                  LD        A, #0x80
   \   00000E AE500A                LDW       X, #0x500a
   \   000011 CD0000                CALL      L:GPIO_SetBits
   \   000014 CD0000                CALL      L:?pop_l1
   \   000017 CD0000                CALL      L:?pop_l0
   \   00001A 80                    IRET

   \                                 In section .near_func.text, align 1
   \   __interrupt void USART1_RX_IRQHandler(void)
   \                     USART1_RX_IRQHandler:
   \                     _interrupt_30:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 CD0000                CALL      L:?push_l0
   \   000009 CD0000                CALL      L:?push_l1
   \   00000C AE5230                LDW       X, #0x5230
   \   00000F CD0000                CALL      L:USART_ReceiveData8
   \   000012 A144                  CP        A, #0x44
   \   000014 260E                  JRNE      L:??USART1_RX_IRQHandler_0
   \   000016 C70000                LD        L:usart_buffer, A
   \   000019 5F                    CLRW      X
   \   00001A 5C                    INCW      X
   \   00001B CF0000                LDW       L:current_buffer_position, X
   \   00001E 35000000              MOV       L:config_complete_flag, #0x0
   \   000022 2051                  JRA       L:??USART1_RX_IRQHandler_1
   \                     ??USART1_RX_IRQHandler_0:
   \   000024 A154                  CP        A, #0x54
   \   000026 260F                  JRNE      L:??USART1_RX_IRQHandler_2
   \   000028 C70000                LD        L:usart_buffer + 2, A
   \   00002B AE0003                LDW       X, #0x3
   \   00002E CF0000                LDW       L:current_buffer_position, X
   \   000031 35000000              MOV       L:config_complete_flag, #0x0
   \   000035 203E                  JRA       L:??USART1_RX_IRQHandler_1
   \                     ??USART1_RX_IRQHandler_2:
   \   000037 A144                  CP        A, #0x44
   \   000039 2715                  JREQ      L:??USART1_RX_IRQHandler_3
   \   00003B A154                  CP        A, #0x54
   \   00003D 2711                  JREQ      L:??USART1_RX_IRQHandler_3
   \   00003F CE0000                LDW       X, L:current_buffer_position
   \   000042 A30001                CPW       X, #0x1
   \   000045 2609                  JRNE      L:??USART1_RX_IRQHandler_3
   \   000047 C70000                LD        L:usart_buffer + 1, A
   \   00004A 35000000              MOV       L:config_complete_flag, #0x0
   \   00004E 2025                  JRA       L:??USART1_RX_IRQHandler_1
   \                     ??USART1_RX_IRQHandler_3:
   \   000050 A144                  CP        A, #0x44
   \   000052 2719                  JREQ      L:??USART1_RX_IRQHandler_4
   \   000054 A154                  CP        A, #0x54
   \   000056 2715                  JREQ      L:??USART1_RX_IRQHandler_4
   \   000058 CE0000                LDW       X, L:current_buffer_position
   \   00005B A30003                CPW       X, #0x3
   \   00005E 260D                  JRNE      L:??USART1_RX_IRQHandler_4
   \   000060 C70000                LD        L:usart_buffer + 3, A
   \   000063 35010000              MOV       L:config_complete_flag, #0x1
   \   000067 5F                    CLRW      X
   \   000068 CF0000                LDW       L:current_buffer_position, X
   \   00006B 2008                  JRA       L:??USART1_RX_IRQHandler_1
   \                     ??USART1_RX_IRQHandler_4:
   \   00006D 35000000              MOV       L:config_complete_flag, #0x0
   \   000071 5F                    CLRW      X
   \   000072 CF0000                LDW       L:current_buffer_position, X
   \                     ??USART1_RX_IRQHandler_1:
   \   000075 C60000                LD        A, L:usart_buffer + 1
   \   000078 5F                    CLRW      X
   \   000079 97                    LD        XL, A
   \   00007A CF0000                LDW       L:degree_interval, X
   \   00007D C60000                LD        A, L:usart_buffer + 3
   \   000080 5F                    CLRW      X
   \   000081 97                    LD        XL, A
   \   000082 CF0000                LDW       L:time_interval, X
   \   000085 CD0000                CALL      L:?pop_l1
   \   000088 CD0000                CALL      L:?pop_l0
   \   00008B 80                    IRET

   \                                 In section .near_func.text, align 1
   \   __interrupt void I2C1_IRQHandler(void)
   \                     I2C1_IRQHandler:
   \                     _interrupt_31:
   \   000000 20FE                  JRA       L:_interrupt_31
      5          
      6          /* Private typedef -----------------------------------------------------------*/
      7          /* Private define ------------------------------------------------------------*/
      8          #define TIM2_PERIOD             65535
      9          #define TIM2_PRESCALER              39999
     10          #define TIM2_REPTETION_COUNTER      0
     11          #define BUFFER_SIZE  10   
     12          /* Private macro -------------------------------------------------------------*/
     13          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.data, align 1
     14          __IO uint16_t CCR1_Val = 30000;
   \                     CCR1_Val:
   \   000000 7530                  DC16 30000

   \                                 In section .near.data, align 1
     15          __IO uint16_t CCR2_Val = 16384;
   \                     CCR2_Val:
   \   000000 4000                  DC16 16384

   \                                 In section .near.data, align 1
     16          __IO uint16_t CCR3_Val = 8192;
   \                     CCR3_Val:
   \   000000 2000                  DC16 8192
     17          
     18          extern unsigned char usart_buffer[BUFFER_SIZE];
     19          extern uint16_t current_buffer_size;
     20          extern uint16_t current_buffer_position;
     21          extern short degree_interval;
     22          extern short time_interval;
     23          extern bool config_complete_flag;

   \                                 In section .near.rodata, align 1
     24          extern const uint8_t ERROR_MESSAGE[5] = "ERROR";
   \                     ERROR_MESSAGE:
   \   000000 4552524F52            DC8 45H, 52H, 52H, 4FH, 52H
     25          
     26          /* Private function prototypes -----------------------------------------------*/
     27          static void CLK_Config(void);
     28          static void GPIO_Config(void);
     29          static void TIM2_Config(void);
     30          static void USART_Config(void);
     31          
     32          extern void USART_SendByte(uint8_t data);
     33          extern void USART_SendString(uint8_t* Data, uint16_t len);
     34          extern uint8_t USART_ReceiveByte(void);
     35          void Delay(int);
     36          /* Private functions ---------------------------------------------------------*/
     37          
     38          /**
     39            * @brief  Main program.
     40            * @param  None
     41            * @retval None
     42            */

   \                                 In section .near_func.text, align 1
     43          void main(void)
     44          {
     45             
     46            CLK_Config(); 
   \                     main:
   \   000000 CD0000                CALL      L:CLK_Config
     47            GPIO_Config();   
   \   000003 CD0000                CALL      L:GPIO_Config
     48            TIM2_Config();  
   \   000006 CD0000                CALL      L:TIM2_Config
     49            USART_Config();
   \   000009 CD0000                CALL      L:USART_Config
     50            
     51            enableInterrupts();
   \   00000C 9A                    rim
     52            
     53            //USART_SendString("Test\n", sizeof("Test\n"));
     54            //delay_10us(100);
     55            //USART_SendByte("\n");
     56            Delay(100);
   \   00000D AE0064                LDW       X, #0x64
   \   000010 CD0000                CALL      L:Delay
     57            uint8_t Buf = 0;
   \   000013 4F                    CLR       A
     58            
     59            
     60            while (1)
   \                     ??main_0:
   \   000014 20FE                  JRA       L:??main_0
     61            {
     62          //    USART_SendString("Test\n", sizeof("Test\n"));
     63          //    while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
     64              
     65          //    Buf=USART_ReceiveData8(USART1);
     66          //    while(USART_GetFlagStatus(USART1, USART_FLAG_OR) == SET);
     67          //    if(Buf != 0)
     68          //    {
     69          //      USART_SendData8(USART1, Buf);
     70          //    }
     71              //USART_SendString("Succeed!\n", sizeof("Succeed!\n")); 
     72              //Delay(1000);
     73              
     74              /* This block of code is used to test whether the PC program can generate 
     75                 right information to send. 
     76              Buf = USART_ReceiveData8(USART1);
     77              if(Buf == 'C')
     78              {
     79                GPIO_SetBits(GPIOE, GPIO_Pin_7);
     80              }
     81              else
     82              {
     83                GPIO_ResetBits(GPIOE, GPIO_Pin_7); 
     84              }
     85              */
     86            }
     87          }
     88          
     89          /**
     90            * @brief  Configure peripherals 
     91            */

   \                                 In section .near_func.text, align 1
     92          static void CLK_Config(void)
     93          {
     94            /* Enable TIM1 clock */
     95            CLK_SYSCLKDivConfig(CLK_SYSCLKDiv_8);
   \                     CLK_Config:
   \   000000 A603                  LD        A, #0x3
   \   000002 CD0000                CALL      L:CLK_SYSCLKDivConfig
     96            CLK_PeripheralClockConfig(CLK_Peripheral_TIM2, ENABLE);
   \   000005 35010000              MOV       S:?b0, #0x1
   \   000009 4F                    CLR       A
   \   00000A CC0000                JP        L:CLK_PeripheralClockConfig
     97          }
     98          

   \                                 In section .near_func.text, align 1
     99          static void GPIO_Config(void)
    100          {
    101            /* GPIOD configuration: TIM1 channel 1 (PD2), channel 2 (PD4) and channel 3 (PD5) */
    102            GPIO_Init(GPIOB, GPIO_Pin_0, GPIO_Mode_Out_PP_Low_Fast);
   \                     GPIO_Config:
   \   000000 35E00000              MOV       S:?b0, #0xe0
   \   000004 A601                  LD        A, #0x1
   \   000006 AE5005                LDW       X, #0x5005
   \   000009 CD0000                CALL      L:GPIO_Init
    103            GPIO_Init(GPIOE, GPIO_Pin_7, GPIO_Mode_Out_PP_Low_Fast);  
   \   00000C 35E00000              MOV       S:?b0, #0xe0
   \   000010 A680                  LD        A, #0x80
   \   000012 AE5014                LDW       X, #0x5014
   \   000015 CD0000                CALL      L:GPIO_Init
    104            GPIO_Init(GPIOC, GPIO_Pin_7, GPIO_Mode_Out_PP_Low_Fast);
   \   000018 35E00000              MOV       S:?b0, #0xe0
   \   00001C A680                  LD        A, #0x80
   \   00001E AE500A                LDW       X, #0x500a
   \   000021 CC0000                JP        L:GPIO_Init
    105            //GPIO_SetBits(GPIOE, GPIO_Pin_7);
    106          }
    107          

   \                                 In section .near_func.text, align 1
    108          static void TIM2_Config(void)
    109          {
    110            /*
    111            - TIM1CLK = 2 MHz
    112            - TIM1 counter clock = TIM1CLK / TIM1_PRESCALER+1 = 2 MHz/39999+1 = 50 Hz
    113            */
    114            /*
    115            - The TIM1 CCR1 register value is equal to 3000: 
    116            - So the TIM1 Channel 1 generates a periodic signal with a frequency equal to 50 Hz.
    117            - PB0
    118            */
    119            /* PWM1 Mode configuration: Channel1 */
    120            TIM2_TimeBaseInit(TIM2_Prescaler_1, TIM2_CounterMode_Up, 39999);
   \                     TIM2_Config:
   \   000000 AE9C3F                LDW       X, #0x9c3f
   \   000003 3F00                  CLR       S:?b0
   \   000005 4F                    CLR       A
   \   000006 CD0000                CALL      L:TIM2_TimeBaseInit
    121            TIM2_OC1Init(TIM2_OCMode_PWM1, TIM2_OutputState_Enable, 0, TIM2_OCPolarity_High, TIM2_OCIdleState_Set);
   \   000009 35010000              MOV       S:?b2, #0x1
   \   00000D 3F00                  CLR       S:?b1
   \   00000F 5F                    CLRW      X
   \   000010 35010000              MOV       S:?b0, #0x1
   \   000014 A660                  LD        A, #0x60
   \   000016 CD0000                CALL      L:TIM2_OC1Init
    122            TIM2_OC1PreloadConfig(ENABLE);
   \   000019 A601                  LD        A, #0x1
   \   00001B CD0000                CALL      L:TIM2_OC1PreloadConfig
    123            TIM2_CtrlPWMOutputs(ENABLE);
   \   00001E A601                  LD        A, #0x1
   \   000020 CD0000                CALL      L:TIM2_CtrlPWMOutputs
    124            TIM2_SetCompare1(3000);
   \   000023 AE0BB8                LDW       X, #0xbb8
   \   000026 CD0000                CALL      L:TIM2_SetCompare1
    125            TIM2_Cmd(ENABLE);
   \   000029 A601                  LD        A, #0x1
   \   00002B CC0000                JP        L:TIM2_Cmd
    126          }
    127          

   \                                 In section .near_func.text, align 1
    128          static void USART_Config(void)
    129          {
    130            //PA3 Send
    131            //PA2 receive
    132            current_buffer_size = 0;
   \                     USART_Config:
   \   000000 5F                    CLRW      X
   \   000001 CF0000                LDW       L:current_buffer_size, X
    133            current_buffer_position = 0;
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:current_buffer_position, X
    134            SYSCFG_REMAPPinConfig(REMAP_Pin_USART1TxRxPortA, ENABLE);   //Map USART to PortA
   \   000008 A601                  LD        A, #0x1
   \   00000A AE011C                LDW       X, #0x11c
   \   00000D CD0000                CALL      L:SYSCFG_REMAPPinConfig
    135            
    136            GPIO_Init(GPIOA,GPIO_Pin_2,GPIO_Mode_In_PU_No_IT);    //USART_RX
   \   000010 35400000              MOV       S:?b0, #0x40
   \   000014 A604                  LD        A, #0x4
   \   000016 AE5000                LDW       X, #0x5000
   \   000019 CD0000                CALL      L:GPIO_Init
    137            //GPIO_Init(GPIOA,GPIO_Pin_3,GPIO_Mode_Out_PP_Low_Fast);     //USART_TX
    138            GPIO_ExternalPullUpConfig(GPIOA, GPIO_Pin_3, ENABLE);        //Let this port been controlled by external signal
   \   00001C 35010000              MOV       S:?b0, #0x1
   \   000020 A608                  LD        A, #0x8
   \   000022 AE5000                LDW       X, #0x5000
   \   000025 CD0000                CALL      L:GPIO_ExternalPullUpConfig
    139            
    140            CLK_PeripheralClockConfig(CLK_Peripheral_USART1, ENABLE);
   \   000028 35010000              MOV       S:?b0, #0x1
   \   00002C A605                  LD        A, #0x5
   \   00002E CD0000                CALL      L:CLK_PeripheralClockConfig
    141            //GPIO_ExternalPullUpConfig(GPIOA, GPIO_Pin_2|GPIO_Pin_3, ENABLE);
    142            USART_DeInit(USART1);  
   \   000031 AE5230                LDW       X, #0x5230
   \   000034 CD0000                CALL      L:USART_DeInit
    143            USART_Init(USART1,
    144                       9600, 
    145                       USART_WordLength_8b,
    146                       USART_StopBits_1,
    147                       USART_Parity_No,
    148                       (USART_Mode_TypeDef)(USART_Mode_Rx|USART_Mode_Tx));
   \   000037 350C0000              MOV       S:?b6, #0xc
   \   00003B 3F00                  CLR       S:?b5
   \   00003D 3F00                  CLR       S:?b4
   \   00003F 4F                    CLR       A
   \   000040 AE2580                LDW       X, #0x2580
   \   000043 BF00                  LDW       S:?w1, X
   \   000045 5F                    CLRW      X
   \   000046 BF00                  LDW       S:?w0, X
   \   000048 AE5230                LDW       X, #0x5230
   \   00004B CD0000                CALL      L:USART_Init
    149            USART_ClockInit(USART1,USART_Clock_Disable,USART_CPOL_Low,USART_CPHA_2Edge,USART_LastBit_Disable);
   \   00004E 3F00                  CLR       S:?b2
   \   000050 35020000              MOV       S:?b1, #0x2
   \   000054 3F00                  CLR       S:?b0
   \   000056 4F                    CLR       A
   \   000057 AE5230                LDW       X, #0x5230
   \   00005A CD0000                CALL      L:USART_ClockInit
    150            USART_ClearITPendingBit(USART1,USART_IT_RXNE);
   \   00005D 90AE0255              LDW       Y, #0x255
   \   000061 AE5230                LDW       X, #0x5230
   \   000064 CD0000                CALL      L:USART_ClearITPendingBit
    151            //USART_ITConfig(USART1, (USART_FLAG_TypeDef)(USART_IT_TXE | USART_IT_RXNE), ENABLE);
    152            USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
   \   000067 A601                  LD        A, #0x1
   \   000069 90AE0255              LDW       Y, #0x255
   \   00006D AE5230                LDW       X, #0x5230
   \   000070 CD0000                CALL      L:USART_ITConfig
    153            USART_Cmd(USART1, ENABLE);
   \   000073 A601                  LD        A, #0x1
   \   000075 AE5230                LDW       X, #0x5230
   \   000078 CC0000                JP        L:USART_Cmd
    154          }
    155          
    156          

   \                                 In section .near_func.text, align 1
    157          void USART_SendByte(uint8_t data)
    158          {
    159            USART_SendData8(USART1, (unsigned char)data);
   \                     USART_SendByte:
   \   000000 AE5230                LDW       X, #0x5230
   \   000003 CD0000                CALL      L:USART_SendData8
    160            /* Loop until the end of transmission */
    161            while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
   \                     ??USART_SendByte_0:
   \   000006 90AE0080              LDW       Y, #0x80
   \   00000A AE5230                LDW       X, #0x5230
   \   00000D CD0000                CALL      L:USART_GetFlagStatus
   \   000010 A100                  CP        A, #0x0
   \   000012 27F2                  JREQ      L:??USART_SendByte_0
    162          }
   \   000014 81                    RET
    163          

   \                                 In section .near_func.text, align 1
    164          void USART_SendString(uint8_t* Data, uint16_t len)
    165          {
   \                     USART_SendString:
   \   000000 CD0000                CALL      L:?push_l2
   \   000003 CD0000                CALL      L:?push_w6
   \   000006 BF00                  LDW       S:?w6, X
   \   000008 90BF00                LDW       S:?w5, Y
    166            //unit16_t i = 0;
    167            for(int i = 0; i < len; i++)
   \   00000B 3F00                  CLR       S:?b9
   \   00000D 3F00                  CLR       S:?b8
   \   00000F 200F                  JRA       L:??USART_SendString_0
    168            {
    169              USART_SendByte(Data[i]);  
   \                     ??USART_SendString_1:
   \   000011 BE00                  LDW       X, S:?w4
   \   000013 72BB0000              ADDW      X, S:?w6
   \   000017 F6                    LD        A, (X)
   \   000018 CD0000                CALL      L:USART_SendByte
    170            }
   \   00001B BE00                  LDW       X, S:?w4
   \   00001D 5C                    INCW      X
   \   00001E BF00                  LDW       S:?w4, X
   \                     ??USART_SendString_0:
   \   000020 BE00                  LDW       X, S:?w4
   \   000022 B300                  CPW       X, S:?w5
   \   000024 25EB                  JRC       L:??USART_SendString_1
    171          }
   \   000026 CC0000                JP        L:?epilogue_l2_w6
    172          

   \                                 In section .near_func.text, align 1
    173          uint8_t USART_ReceiveByte(void)
    174          {
    175            uint8_t USART_RX_BUF;
    176            while(USART_GetFlageStatus(USART1, USART_FLAG_RXNE) == RESET);
   \                     USART_ReceiveByte:
   \                     ??USART_ReceiveByte_0:
   \   000000 90AE0020              LDW       Y, #0x20
   \   000004 AE5230                LDW       X, #0x5230
   \   000007 CD0000                CALL      L:USART_GetFlageStatus
   \   00000A 5D                    TNZW      X
   \   00000B 27F3                  JREQ      L:??USART_ReceiveByte_0
    177            USART_RX_BUF = USART_ReceiveData8(USART1);
   \   00000D AE5230                LDW       X, #0x5230
   \   000010 CC0000                JP        L:USART_ReceiveData8
    178            return USART_RX_BUF;
    179          }
    180          

   \                                 In section .near_func.text, align 1
    181          void Delay(int time)
    182          {
   \                     Delay:
   \   000000 BF00                  LDW       S:?w0, X
    183            for(int i = 0; i < time; i++)
   \   000002 905F                  CLRW      Y
   \   000004 2008                  JRA       L:??Delay_0
    184              for(int j = 0; j < 100; j++);
   \                     ??Delay_1:
   \   000006 5C                    INCW      X
   \                     ??Delay_2:
   \   000007 A30064                CPW       X, #0x64
   \   00000A 2FFA                  JRSLT     L:??Delay_1
   \   00000C 905C                  INCW      Y
   \                     ??Delay_0:
   \   00000E 90B300                CPW       Y, S:?w0
   \   000011 2E03                  JRSGE     L:??Delay_3
   \   000013 5F                    CLRW      X
   \   000014 20F1                  JRA       L:??Delay_2
    185          }
   \                     ??Delay_3:
   \   000016 81                    RET
    186          
    187          
    188          #ifdef  USE_FULL_ASSERT
    189          
    190          void assert_failed(uint8_t* file, uint32_t line)
    191          {
    192            /* User can add his own implementation to report the file name and line number,
    193               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    194          
    195            /* Infinite loop */
    196            while (1)
    197            {}
    198          }
    199          #endif

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     BUFFER_SIZE                       2
     usart_buffer                     10
     current_buffer_position           2
     current_buffer_size               2
     degree_interval                   2
     time_interval                     2
     config_complete_flag              1
     NonHandledInterrupt               2
     TRAP_IRQHandler                   2
     FLASH_IRQHandler                  2
     DMA1_CHANNEL0_1_IRQHandler        2
     DMA1_CHANNEL2_3_IRQHandler        2
     RTC_IRQHandler                    2
     EXTIE_F_PVD_IRQHandler            2
     EXTIB_IRQHandler                  2
     EXTID_IRQHandler                  2
     EXTI0_IRQHandler                  2
     EXTI1_IRQHandler                  1
     EXTI2_IRQHandler                  2
     EXTI3_IRQHandler                  2
     EXTI4_IRQHandler                  2
     EXTI5_IRQHandler                  2
     EXTI6_IRQHandler                  1
     EXTI7_IRQHandler                  2
     LCD_IRQHandler                    2
     SWITCH_CSS_BREAK_DAC_IRQHandler
                                       2
     ADC1_COMP_IRQHandler              2
     TIM2_UPD_OVF_TRG_BRK_IRQHandler
                                       2
     TIM2_CAP_IRQHandler               2
     TIM3_UPD_OVF_TRG_BRK_IRQHandler
                                       2
     TIM3_CAP_IRQHandler               2
     TIM1_UPD_OVF_TRG_COM_IRQHandler
                                       2
     TIM1_CAP_IRQHandler               2
     TIM4_UPD_OVF_TRG_IRQHandler       2
     SPI1_IRQHandler                   2
     USART1_TX_IRQHandler             27
     USART1_RX_IRQHandler            140
     I2C1_IRQHandler                   2
     CCR1_Val                          2
     CCR2_Val                          2
     CCR3_Val                          2
     ERROR_MESSAGE                     5
     main                             22
     CLK_Config                       13
     GPIO_Config                      36
     TIM2_Config                      46
     USART_Config                    123
     USART_SendByte                   21
     USART_SendString                 41
     USART_ReceiveByte                19
     Delay                            23

 
  19 bytes in section .near.bss
   6 bytes in section .near.data
   7 bytes in section .near.rodata
 567 bytes in section .near_func.text
 
 567 bytes of CODE  memory
   7 bytes of CONST memory
  25 bytes of DATA  memory

Errors: none
Warnings: 2
