###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             11/Mar/2014  16:54:39 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  F:\Skydrive\Final Design\Servo Motor                     #
#                    STM8L\Project\Discover\src\main.c                        #
#    Command line =  "F:\Skydrive\Final Design\Servo Motor                    #
#                    STM8L\Project\Discover\src\main.c" -e -Ol --no_cse       #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_cross_call --debug --code_model small --data_model  #
#                    medium -o "F:\Skydrive\Final Design\Servo Motor          #
#                    STM8L\Debug\Obj\" --dlib_config "D:\IAR                  #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8smn.h" -D  #
#                    STM8L15X_MD -lCN "F:\Skydrive\Final Design\Servo Motor   #
#                    STM8L\Debug\List\" --diag_suppress Pe177,Pe550 -I        #
#                    "F:\Skydrive\Final Design\Servo Motor                    #
#                    STM8L\Project\Discover\inc\" -I "F:\Skydrive\Final       #
#                    Design\Servo Motor STM8L\Libraries\STM8L15x_StdPeriph_Dr #
#                    iver\inc\" --vregs 16                                    #
#    List file    =  F:\Skydrive\Final Design\Servo Motor                     #
#                    STM8L\Debug\List\main.lst                                #
#    Object file  =  F:\Skydrive\Final Design\Servo Motor                     #
#                    STM8L\Debug\Obj\main.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

F:\Skydrive\Final Design\Servo Motor STM8L\Project\Discover\src\main.c
      1          
      2          #include "stm8l15x.h"
      3          
      4          /** @addtogroup STM8L15x_StdPeriph_Examples
      5            * @{
      6            */
      7          
      8          /** @addtogroup TIM1_PWMOutput
      9            * @{
     10            */
     11          
     12          /* Private typedef -----------------------------------------------------------*/
     13          /* Private define ------------------------------------------------------------*/
     14          #define TIM1_PERIOD             65535
     15          #define TIM1_PRESCALER              1
     16          #define TIM1_REPTETION_COUNTER      0
     17          
     18          /* Private macro -------------------------------------------------------------*/
     19          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.data, align 1
     20          __IO uint16_t CCR1_Val = 32768;
   \                     CCR1_Val:
   \   000000 8000                  DC16 32768

   \                                 In section .near.data, align 1
     21          __IO uint16_t CCR2_Val = 16384;
   \                     CCR2_Val:
   \   000000 4000                  DC16 16384

   \                                 In section .near.data, align 1
     22          __IO uint16_t CCR3_Val = 8192;
   \                     CCR3_Val:
   \   000000 2000                  DC16 8192
     23          
     24          /* Private function prototypes -----------------------------------------------*/
     25          static void CLK_Config(void);
     26          static void GPIO_Config(void);
     27          static void TIM1_Config(void);
     28          /* Private functions ---------------------------------------------------------*/
     29          
     30          /**
     31            * @brief  Main program.
     32            * @param  None
     33            * @retval None
     34            */

   \                                 In section .near_func.text, align 1
     35          void main(void)
     36          {
     37             /* CLK configuration -------------------------------------------*/
     38            CLK_Config(); 
   \                     main:
   \   000000 CD0000                CALL      L:CLK_Config
     39          
     40             /* GPIO configuration -------------------------------------------*/
     41            GPIO_Config(); 
   \   000003 CD0000                CALL      L:GPIO_Config
     42            
     43             /* TIM1 configuration -------------------------------------------*/
     44            TIM1_Config();
   \   000006 CD0000                CALL      L:TIM1_Config
     45          
     46            /* Infinite loop */
     47            while (1)
   \                     ??main_0:
   \   000009 20FE                  JRA       L:??main_0
     48            {}
     49          }
     50          
     51          /**
     52            * @brief  Configure peripherals Clock   
     53            * @param  None
     54            * @retval None
     55            */

   \                                 In section .near_func.text, align 1
     56          static void CLK_Config(void)
     57          {
     58            /* Enable TIM1 clock */
     59            CLK_PeripheralClockConfig(CLK_Peripheral_TIM1, ENABLE);
   \                     CLK_Config:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 A611                  LD        A, #0x11
   \   000006 CC0000                JP        L:CLK_PeripheralClockConfig
     60          }
     61          
     62          /**
     63            * @brief  Configure TIM Channels GPIO 
     64            * @param  None
     65            * @retval None
     66            */

   \                                 In section .near_func.text, align 1
     67          static void GPIO_Config(void)
     68          {
     69            /* GPIOD configuration: TIM1 channel 1 (PD2), channel 2 (PD4) and channel 3 (PD5) */
     70            GPIO_Init(GPIOD, GPIO_Pin_2 | GPIO_Pin_4 | GPIO_Pin_5, GPIO_Mode_Out_PP_Low_Fast);
   \                     GPIO_Config:
   \   000000 35E00000              MOV       S:?b0, #0xe0
   \   000004 A634                  LD        A, #0x34
   \   000006 AE500F                LDW       X, #0x500f
   \   000009 CC0000                JP        L:GPIO_Init
     71          }
     72          
     73          /**
     74            * @brief  Configure TIM1 peripheral 
     75            * @param  None
     76            * @retval None
     77            */

   \                                 In section .near_func.text, align 1
     78          static void TIM1_Config(void)
     79          {
     80            /*
     81            - TIM1CLK = 2 MHz
     82            - TIM1 counter clock = TIM1CLK / TIM1_PRESCALER+1 = 2 MHz/1+1 = 1 MHz
     83            */
     84            /* Time base configuration */
     85            TIM1_TimeBaseInit(TIM1_PRESCALER, TIM1_CounterMode_Up, TIM1_PERIOD, TIM1_REPTETION_COUNTER);
   \                     TIM1_Config:
   \   000000 3F00                  CLR       S:?b0
   \   000002 90AEFFFF              LDW       Y, #0xffff
   \   000006 4F                    CLR       A
   \   000007 5F                    CLRW      X
   \   000008 5C                    INCW      X
   \   000009 CD0000                CALL      L:TIM1_TimeBaseInit
     86          
     87            /*
     88            - The TIM1 CCR1 register value is equal to 32768: 
     89            - CC1 update rate = TIM1 counter clock / CCR1_Val = 30.51 Hz,
     90            - So the TIM1 Channel 1 generates a periodic signal with a frequency equal to 15.25 Hz.
     91            */
     92            /* Toggle Mode configuration: Channel1 */
     93            TIM1_OC1Init(TIM1_OCMode_Toggle, TIM1_OutputState_Enable, TIM1_OutputNState_Disable,
     94                         CCR1_Val, TIM1_OCPolarity_Low, TIM1_OCNPolarity_Low, TIM1_OCIdleState_Set,
     95                         TIM1_OCNIdleState_Set);
   \   00000C 352A0000              MOV       S:?b5, #0x2a
   \   000010 35550000              MOV       S:?b4, #0x55
   \   000014 35880000              MOV       S:?b3, #0x88
   \   000018 35220000              MOV       S:?b2, #0x22
   \   00001C CE0000                LDW       X, L:CCR1_Val
   \   00001F 3F00                  CLR       S:?b1
   \   000021 35110000              MOV       S:?b0, #0x11
   \   000025 A630                  LD        A, #0x30
   \   000027 CD0000                CALL      L:TIM1_OC1Init
     96            TIM1_OC1PreloadConfig(DISABLE);
   \   00002A 4F                    CLR       A
   \   00002B CD0000                CALL      L:TIM1_OC1PreloadConfig
     97          
     98            /*
     99            - The TIM1 CCR2 register is equal to 16384:
    100            - CC2 update rate = TIM1 counter clock / CCR2_Val = 61.03 Hz
    101            - So the TIM1 channel 2 generates a periodic signal with a frequency equal to 30.51 Hz.
    102            */
    103            /* Toggle Mode configuration: Channel2 */
    104            TIM1_OC2Init(TIM1_OCMode_Toggle, TIM1_OutputState_Enable, TIM1_OutputNState_Disable,
    105                         CCR2_Val, TIM1_OCPolarity_Low, TIM1_OCNPolarity_Low, TIM1_OCIdleState_Set,
    106                         TIM1_OCNIdleState_Set);
   \   00002E 352A0000              MOV       S:?b5, #0x2a
   \   000032 35550000              MOV       S:?b4, #0x55
   \   000036 35880000              MOV       S:?b3, #0x88
   \   00003A 35220000              MOV       S:?b2, #0x22
   \   00003E CE0000                LDW       X, L:CCR2_Val
   \   000041 3F00                  CLR       S:?b1
   \   000043 35110000              MOV       S:?b0, #0x11
   \   000047 A630                  LD        A, #0x30
   \   000049 CD0000                CALL      L:TIM1_OC2Init
    107            TIM1_OC2PreloadConfig(DISABLE);
   \   00004C 4F                    CLR       A
   \   00004D CD0000                CALL      L:TIM1_OC2PreloadConfig
    108          
    109            /*
    110            -The TIM1 CCR3 register is equal to 8192:
    111            - CC3 update rate = TIM1 counter clock / CCR3_Val = 123.01 Hz
    112            - So the TIM1 channel 3 generates a periodic signal with a frequency equal to 61.5 Hz.
    113            */
    114            /* Toggle Mode configuration: Channel3 */
    115            TIM1_OC3Init(TIM1_OCMode_Toggle, TIM1_OutputState_Enable, TIM1_OutputNState_Disable,
    116                         CCR3_Val, TIM1_OCPolarity_Low, TIM1_OCNPolarity_Low, TIM1_OCIdleState_Set,
    117                         TIM1_OCNIdleState_Set);
   \   000050 352A0000              MOV       S:?b5, #0x2a
   \   000054 35550000              MOV       S:?b4, #0x55
   \   000058 35880000              MOV       S:?b3, #0x88
   \   00005C 35220000              MOV       S:?b2, #0x22
   \   000060 CE0000                LDW       X, L:CCR3_Val
   \   000063 3F00                  CLR       S:?b1
   \   000065 35110000              MOV       S:?b0, #0x11
   \   000069 A630                  LD        A, #0x30
   \   00006B CD0000                CALL      L:TIM1_OC3Init
    118            TIM1_OC3PreloadConfig(DISABLE);
   \   00006E 4F                    CLR       A
   \   00006F CD0000                CALL      L:TIM1_OC3PreloadConfig
    119          
    120            TIM1_ARRPreloadConfig(ENABLE);
   \   000072 A601                  LD        A, #0x1
   \   000074 CD0000                CALL      L:TIM1_ARRPreloadConfig
    121          
    122            /* TIM1 Interrupt enable */
    123            TIM1_ITConfig(TIM1_IT_CC1, ENABLE);
   \   000077 35010000              MOV       S:?b0, #0x1
   \   00007B A602                  LD        A, #0x2
   \   00007D CD0000                CALL      L:TIM1_ITConfig
    124            TIM1_ITConfig(TIM1_IT_CC2, ENABLE);
   \   000080 35010000              MOV       S:?b0, #0x1
   \   000084 A604                  LD        A, #0x4
   \   000086 CD0000                CALL      L:TIM1_ITConfig
    125            TIM1_ITConfig(TIM1_IT_CC3, ENABLE);
   \   000089 35010000              MOV       S:?b0, #0x1
   \   00008D A608                  LD        A, #0x8
   \   00008F CD0000                CALL      L:TIM1_ITConfig
    126            enableInterrupts();
   \   000092 9A                    rim
    127          
    128            /* Enable TIM1 outputs */
    129            TIM1_CtrlPWMOutputs(ENABLE);
   \   000093 A601                  LD        A, #0x1
   \   000095 CD0000                CALL      L:TIM1_CtrlPWMOutputs
    130            /* TIM1 enable counter */
    131            TIM1_Cmd(ENABLE);
   \   000098 A601                  LD        A, #0x1
   \   00009A CC0000                JP        L:TIM1_Cmd
    132          }
    133          
    134          #ifdef  USE_FULL_ASSERT
    135          
    136          /**
    137            * @brief  Reports the name of the source file and the source line number
    138            *   where the assert_param error has occurred.
    139            * @param  file: pointer to the source file name
    140            * @param  line: assert_param error line source number
    141            * @retval None
    142            */
    143          void assert_failed(uint8_t* file, uint32_t line)
    144          {
    145            /* User can add his own implementation to report the file name and line number,
    146               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    147          
    148            /* Infinite loop */
    149            while (1)
    150            {}
    151          }
    152          #endif

   Section sizes:

     Function/Label Bytes
     -------------- -----
     CCR1_Val          2
     CCR2_Val          2
     CCR3_Val          2
     main             11
     CLK_Config        9
     GPIO_Config      12
     TIM1_Config     157

 
   6 bytes in section .near.data
 189 bytes in section .near_func.text
 
 189 bytes of CODE memory
   6 bytes of DATA memory

Errors: none
Warnings: none
